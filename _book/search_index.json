[
["index.html", "Validation of Superpower Chapter 1 Introduction", " Validation of Superpower Aaron Caldwell &amp; Daniël Lakens 2019-09-12 Chapter 1 Introduction Below we have included various examples of the performance of Superpower against other R packages and statistical programs (such as GPower). "],
["intro.html", "Chapter 2 One-way ANOVA Part 1 2.1 Validation of Power in One-Way ANOVA 2.2 Two conditions", " Chapter 2 One-way ANOVA Part 1 knitr::opts_chunk$set(echo = TRUE) nsims &lt;- 100 #set number of simulations require(mvtnorm, quietly = TRUE) require(MASS, quietly = TRUE) require(afex, quietly = TRUE) ## Warning: package &#39;afex&#39; was built under R version 3.6.1 ## Registered S3 methods overwritten by &#39;car&#39;: ## method from ## influence.merMod lme4 ## cooks.distance.influence.merMod lme4 ## dfbeta.influence.merMod lme4 ## dfbetas.influence.merMod lme4 ## ************ ## Welcome to afex. For support visit: http://afex.singmann.science/ ## - Functions for ANOVAs: aov_car(), aov_ez(), and aov_4() ## - Methods for calculating p-values with mixed(): &#39;KR&#39;, &#39;S&#39;, &#39;LRT&#39;, and &#39;PB&#39; ## - &#39;afex_aov&#39; and &#39;mixed&#39; objects can be passed to emmeans() for follow-up tests ## - NEWS: library(&#39;emmeans&#39;) now needs to be called explicitly! ## - Get and set global package options with: afex_options() ## - Set orthogonal sum-to-zero contrasts globally: set_sum_contrasts() ## - For example analyses see: browseVignettes(&quot;afex&quot;) ## ************ ## ## Attaching package: &#39;afex&#39; ## The following object is masked from &#39;package:lme4&#39;: ## ## lmer require(emmeans, quietly = TRUE) require(ggplot2, quietly = TRUE) require(gridExtra, quietly = TRUE) require(reshape2, quietly = TRUE) require(pwr, quietly = TRUE) # Install functions from GitHub by running the code below: library(Superpower) 2.1 Validation of Power in One-Way ANOVA Using the formula also used in Albers &amp; Lakens (2018), we can determine the means that should yield a specified effect sizes (expressed in Cohen’s f). Eta-squared (identical to partial eta-squared for One-Way ANOVA’s) has benchmarks of .0099, .0588, and .1379 for small, medium, and large effect sizes (Cohen, 1988). Athough these benchmarks are quite random, and researchers should only use such benchmarks for power analyses as a last resort, we will demonstrate a-priori power analysis for these values. 2.2 Two conditions Imagine we aim to design a study to test the hypothesis that giving people a pet to take care of will increase their life satisfaction. We have a control condition, and a condition where people get a pet, and randomly assign participants to either condition. We can simulate a One-Way ANOVA with a specified alpha, sample size, and effect size, on see the statistical power we would have for the ANOVA and the follow-up comparisons. We expect pets to increase life-satisfaction compared to the control condition. Based on work by Pavot and Diener (1993) we believe that we can expect responses on the life-satifaction scale to have a mean of approximately 24 in our population, with a standard deviation of 6.4. We expect having a pet increases life satisfaction with approximately 2.2 scale points for participants who get a pet. 200 participants in total, with 100 participants in each condition. But before we proceed with the data collection, we examine the statistical power our design would have to detect the differences we predict. string &lt;- &quot;2b&quot; n &lt;- 100 # We are thinking of running 50 peope in each condition mu &lt;- c(24, 26.2) # Enter means in the order that matches the labels below. # In this case, control, cat, dog. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;pet&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 # You should think carefully about how to justify your alpha level. # We will give some examples later, but for now, use 0.05. ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 66 0.03361 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 66 0.3458 The result shows that we have exactly the same power for the ANOVA, as we have for the t-test. This is because when there are only two groups, these tests are mathematically identical. In a study with 100 participants, we would have quite low power (around 67.7%). An ANOVA with 2 groups is identical to a t-test. For our example, Cohen’s d (the standardized mean difference) is 2.2/6.4, or d = 0.34375 for the difference between the control condition and pets, which we can use to easily compute the expected power for these simple comparisons using the pwr package. pwr.t.test(d = 2.2/6.4, n = 100, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.6768572 We can also directly compute Cohen’s f from Cohen’s d for two groups, as Cohen (1988) describes, because f = 1/2d. So f = 0.5*0.34375 = 0.171875. And indeed, power analysis using the pwr package yields the same result using the pwr.anova.test as the power.t.test. K &lt;- 2 n &lt;- 100 f &lt;- 0.171875 pwr.anova.test(n = n, k = K, f = f, sig.level = alpha_level)$power ## [1] 0.6768572 This analysis tells us that running the study with 100 participants in each condition is too likely to not yield a significant test result, even if our expected pattern of differences is true. This is not optimal. Let’s mathematically explore which pattern of means we would need to expect to habe 90% power for the ANOVA with 50 participants in each group. We can use the pwr package in R to compute a sensitivity analysis that tells us the effect size, in Cohen’s f, that we are able to detect with 3 groups and 50 partiicpants in each group, in order to achive 90% power with an alpha level of 5%. K &lt;- 2 n &lt;- 100 sd &lt;- 6.4 r &lt;- 0 #Calculate f when running simulation f &lt;- pwr.anova.test(n = n, k = K, power = 0.9, sig.level = alpha_level)$f f ## [1] 0.2303587 This sensitivity analysis shows we have 90% power in our planned design to detect effects of Cohen’s f of 0.2303587. Benchmarks by Cohen (1988) for small, medium, and large Cohen’s f values are 0.1, 0.25, and 0.4, which correspond to eta-squared values of small (.0099), medium (.0588), and large (.1379), in line with d = .2, .5, or .8. So, at least based on these benchmarks, we have 90% power to detect effects that are slightly below a medium effect benchmark. f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.0503911 Expressed in eta-squared, we can detect values of eta-squared = 0.05 or larger. mu &lt;- mu_from_ES(K = K, ES = ES) mu &lt;- mu * sd mu ## [1] -1.474295 1.474295 We can compute a pattern of means, given a standard deviation of 6.4, that would give us an effect size of f = 0.23, or eta-squared of 0.05. We should be able to accomplish this is the means are -1.474295 and 1.474295. We can use these values to confirm the ANOVA has 90% power. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 88 0.05172 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 88 0.4466 The simulation confirms that for the F-test for the ANOVA we have 90% power. This is also what g*power tells us what would happen based on a post-hoc power analysis with an f of 0.2303587, 2 groups, 200 participants in total (100 in each between subject condition), and an alpha of 5%. If we return to our expected means, how many participants do we need for sufficient power? Given the expected difference and standard deviation, d = 0.34375, and f = 0.171875. We can perform an a-priori power analysis for this simple case, which tells us we need 179 participants in each group (we can’t split people in parts, and thus always round a power analysis upward), or 358 in total. K &lt;- 2 power &lt;- 0.9 f &lt;- 0.171875 pwr.anova.test(power = power, k = K, f = f, sig.level = alpha_level) ## ## Balanced one-way analysis of variance power calculation ## ## k = 2 ## n = 178.8104 ## f = 0.171875 ## sig.level = 0.05 ## power = 0.9 ## ## NOTE: n is number in each group If we re-run the simulation with this sample size, we indeed have 90% power. string &lt;- &quot;2b&quot; n &lt;- 179 mu &lt;- c(24, 26.2) # Enter means in the order that matches the labels below. # In this case, control, pet. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;pet&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 89 0.03314 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 89 0.3556 We stored the result from the power analysis in an object. This allows us to request plots (which are not printed automatically) showing the p-value distribution. If we request power_result$plot1 we get the p-value distribution for the ANOVA: power_result$plot1 If we request power_result$plot2 we get the p-value distribution for the paired comparisons (in this case only one): power_result$plot2 "],
["one-way-anova-part-2.html", "Chapter 3 One-way ANOVA Part 2 3.1 Validation of Power in One-Way ANOVA with Brysbaert example 3.2 Power for simple effects 3.3 One-way ANOVA Part 3 3.4 Three conditions replication 3.5 Variation 1 3.6 Three conditions replication 3.7 Variation 2 3.8 Three conditions replication", " Chapter 3 One-way ANOVA Part 2 3.1 Validation of Power in One-Way ANOVA with Brysbaert example 3.1.1 Three conditions Imagine we aim to design a study to test the hypothesis that giving people a pet to take care of will increase their life satisfaction. We have a control condition, a ‘cat’ pet condition, and a ‘dog’ pet condition. We can simulate a One-Way ANOVA with a specified alpha, sample size, and effect size, on see the statistical power we would have for the ANOVA and the follow-up comparisons. We expect all pets to increase life-satisfaction compared to the control condition. Obviously, we also expect the people who are in the ‘dog’ pet condition to have even greater life-satisfaction than people in the ‘cat’ pet condition. Based on work by Pavot and Diener (1993) we believe that we can expect responses on the life-satifaction scale to have a mean of approximately 24 in our population, with a standard deviation of 6.4. We expect having a pet increases life satisfaction with approximately 2.2 scale points for participants who get a cat, and 2.6 scale points for participants who get a dog. We initially consider collecting data from 150 participants in total, with 50 participants in each condition. But before we proceed with the data collection, we examine the statistical power our design would have to detect the differences we predict. string &lt;- &quot;3b&quot; n &lt;- 50 # We are thinking of running 50 peope in each condition mu &lt;- c(24, 26.2, 26.6) # Enter means in the order that matches the labels below. # In this case, control, cat, dog. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;cat&quot;, &quot;dog&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 # You should think carefully about how to justify your alpha level. # We will give some examples later, but for now, use 0.05. ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 48 0.04444 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_cat 39 0.34189 ## p_condition_control_condition_dog 47 0.40463 ## p_condition_cat_condition_dog 5 0.06564 #should yield #0.3983064 #0.5205162 #0.06104044 The result shows that you would have quite low power with 50 participants, both for the overall ANOVA (just around 50% power), as for the follow up comparisons (approximately 40% power for the control vs cat condition, around 50% for the control vs dogs condition, and a really low power (around 6%, just above the Type 1 error rate of 5%) for the expected difference between cats and dogs. 3.2 Power for simple effects We are typically not just interested in the ANOVA, but also in follow up comparisons. In this case, we would perform a t-test comparing the control condition against the cat and dog condition, and we would compare the cat and dog conditions against each other, in independent t-tests. For our example, Cohen’s d (the standardized mean difference) is 2.2/6.4, or d = 0.34375 for the difference between the control condition and cats, 2.6/6.4 of d = 0.40625 for the difference between the control condition and dogs, and 0.4/6.4 or d = 0.0625 for the difference between cats and dogs as pets. We can easily compute the expected power for these simple comparisons using the pwr package. pwr.t.test(d = 2.2/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.3983064 pwr.t.test(d = 2.6/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.5205162 pwr.t.test(d = 0.4/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.06104044 This analysis tells us that running the study with 50 participants in each condition is more likely to not yield a significant test result, even if our expected pattern of differences is true, than that we will observe a p-value smaller than our alpha level. This is not optimal. Let’s mathematically explore which pattern of means we would need to expect to habe 90% power for the ANOVA with 50 participants in each group. We can use the pwr package in R to compute a sensitivity analysis that tells us the effect size, in Cohen’s f, that we are able to detect with 3 groups and 50 partiicpants in each group, in order to achive 90% power with an alpha level of 5%. K &lt;- 3 n &lt;- 50 sd &lt;- 6.4 r &lt;- 0 #Calculate f when running simulation f &lt;- pwr.anova.test(n = n, k = K, power = 0.9, sig.level = alpha_level)$f f ## [1] 0.2934417 This sensitivity analysis shows we have 90% power in our planned design to detect effects of Cohen’s f of 0.2934417. Benchmarks by Cohen (1988) for small, medium, and large Cohen’s f values are 0.1, 0.25, and 0.4, which correspond to eta-squared values of small (.0099), medium (.0588), and large (.1379), in line with d = .2, .5, or .8. So, at least based on these benchmarks, we have 90% power to detect effects that are somewhat sizeable. f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.07928127 Expressed in eta-squared, we can detect values of eta-squared = 0.0793 or larger. mu &lt;- mu_from_ES(K = K, ES = ES) mu &lt;- mu * sd mu ## [1] -2.300104 0.000000 2.300104 We can compute a pattern of means, given a standard deviation of 6.4, that would give us an effect size of f = 0.2934, or eta-squared of 0.0793. We should be able to accomplish this is the means are -2.300104, 0.000000, and 2.300104. We can use these values to confirm the ANOVA has 90% power. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 94 0.09751 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_cat 45 0.3862 ## p_condition_control_condition_dog 94 0.7586 ## p_condition_cat_condition_dog 48 0.3708 The simulation confirms that for the F-test for the ANOVA we have 90% power. This is also what g*power tells us what would happen based on a post-hoc power analysis with an f of 0.2934417, 3 groups, 150 participants in total (50 in each between subject condition), and an alpha of 5%. We can also compute the power for the ANOVA and simple effects in R with the pwr package. The calculated effect sizes and power match those from the simulation. K &lt;- 3 n &lt;- 50 sd &lt;- 6.4 f &lt;- 0.2934417 pwr.anova.test(n = n, k = K, f = f, sig.level = alpha_level)$power ## [1] 0.9000112 d &lt;- 2.300104/6.4 d ## [1] 0.3593912 pwr.t.test(d = 2.300104/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.4284243 d &lt;- 2*2.300104/6.4 d ## [1] 0.7187825 pwr.t.test(d = d, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.9450353 We can also compare the results against the analytic solution by Aberson (2019). First, load the function for a 3-way ANOVA. anova1f_3&lt;-function(m1=NULL,m2=NULL,m3=NULL,s1=NULL,s2=NULL,s3=NULL,n1=NULL,n2=NULL,n3=NULL,alpha=.05){ x&lt;-stats::rnorm(n1,m1,s1) X&lt;-x MEAN&lt;-m1 SD&lt;-s1 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A1&quot;,n1) l1&lt;-data.frame(y, group) x&lt;-stats::rnorm(n2,m2,s2) X&lt;-x MEAN&lt;-m2 SD&lt;-s2 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A2&quot;,n2) l2&lt;-data.frame(y, group) x&lt;-stats::rnorm(n3,m3,s3) X&lt;-x MEAN&lt;-m3 SD&lt;-s3 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A3&quot;,n3) l3&lt;-data.frame(y, group) simdat&lt;-rbind(l1,l2,l3) anova&lt;-stats::aov(y~group, data=simdat) anova&lt;-car::Anova(anova, type=&quot;III&quot;) SSA&lt;-anova[2,1] #column, row SSwin&lt;-anova[3,1] dfwin&lt;-anova[3,2] dfbg&lt;-anova[2,2] eta2&lt;-SSA/(SSA+SSwin) f2&lt;-eta2/(1-eta2) lambda&lt;-f2*dfwin minusalpha&lt;-1-alpha Ft&lt;-stats::qf(minusalpha, dfbg, dfwin) power&lt;-1-stats::pf(Ft, dfbg,dfwin,lambda) list(Power = power)} Then we use the function to calculate power. #Initial example, low power anova1f_3(m1=24, m2=26.2, m3=26.6, s1=6.4, s2=6.4, s3=6.4, n1=50, n2=50, n3=50, alpha=.05) ## $Power ## [1] 0.4769468 #From: Aberson, Christopher L. Applied Power Analysis for the Behavioral Sciences, 2nd Edition. # $Power [1] 0.4769468 #Later example, based on larger mean difference anova1f_3(m1=-2.300104, m2=0, m3=2.300104, s1=6.4, s2=6.4, s3=6.4, n1=50, n2=50, n3=50, alpha=.05) ## $Power ## [1] 0.9000112 # $Power [1] 0.9000112 3.3 One-way ANOVA Part 3 We first repeat the simulation by Brysbaert: # Simulations to estimate the power of an ANOVA with three unrelated groups # the effect between the two extreme groups is set to d = .4, the effect for the third group is d = .4 (see below for other situations) # we use the built-in aov-test command # give sample sizes (all samples sizes are equal) N = 90 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.83 sum(p2&lt;alpha2)/nSim ## [1] 0.77 sum(p3&lt;alpha2)/nSim ## [1] 0.74 sum(p4&lt;alpha2)/nSim ## [1] 0.07 mean(pes1) ## [1] 0.03880447 mean(pes2) ## [1] 0.04190195 3.4 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.4) n &lt;- 90 sd &lt;- 1 r &lt;- 0 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 79 0.04436 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 70 0.40690 ## p_factor1_level1_factor1_level3 82 0.42600 ## p_factor1_level2_factor1_level3 2 0.01956 3.5 Variation 1 # give sample sizes (all samples sizes are equal) N = 145 # give effect size d d1 = .4 #difference between the extremes d2 = .0 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.96 sum(p2&lt;alpha2)/nSim ## [1] 0.92 sum(p3&lt;alpha2)/nSim ## [1] 0.05 sum(p4&lt;alpha2)/nSim ## [1] 0.91 mean(pes1) ## [1] 0.03828796 mean(pes2) ## [1] 0.04139193 3.6 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.0) n &lt;- 145 sd &lt;- 1 r &lt;- 0 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 94 0.03837 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 91 0.39489 ## p_factor1_level1_factor1_level3 5 -0.00635 ## p_factor1_level2_factor1_level3 94 -0.39989 3.7 Variation 2 # give sample sizes (all samples sizes are equal) N = 82 # give effect size d d1 = .4 #difference between the extremes d2 = .2 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.65 sum(p2&lt;alpha2)/nSim ## [1] 0.74 sum(p3&lt;alpha2)/nSim ## [1] 0.19 sum(p4&lt;alpha2)/nSim ## [1] 0.29 mean(pes1) ## [1] 0.03435332 mean(pes2) ## [1] 0.04559241 3.8 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.2) n &lt;- 82 sd &lt;- 1 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 59 0.03177 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 70 0.3805 ## p_factor1_level1_factor1_level3 25 0.1839 ## p_factor1_level2_factor1_level3 24 -0.1966 "],
["repeated-measures-anova-part-1.html", "Chapter 4 Repeated Measures-ANOVA Part 1 4.1 Two conditions, medium effect size", " Chapter 4 Repeated Measures-ANOVA Part 1 In a repeated measures design multiple observations are collected from the same participants. In the simplest case, where there are two repeated observations, a repeated measures ANOVA equals a dependent or paired t-test. The difference compared to a between subject design is that repeated measures can be correlated, and in psychology, they often are. Let’s first explore the impact of this correlation on the power of a repeated measures ANOVA. 4.1 Two conditions, medium effect size To illustrate the effect of correated observations, we start by simulating data for a medium effect size for a dependent (or paired, or within-subject) t-test. Let’s first look at G*power. If we want to perform an a-priori power analysis, we are asked to fill in the effect size dz. As Cohen (1988) writes, “The Z subscript is used to emphasize the fact that our raw score unit is no longer X or Y, but Z”, where Z are the difference scores of X-Y. Within designs can have greater power to detect differences than between designs because the values are correlated, and a within design requires less participants because each participant provides multiple observations. One difference between an independent t-test and a dependent t-test is that an independent t-test has 2(n-1) degrees of freedom, while a dependent t-test has (n-1) degrees of freedom. The sample size needed in a two-group within-design (NW) relative to the sample needed in two-group between-designs (NB), assuming normal distributions, and ignoring the difference in degrees of freedom between the two types of tests, is (from Maxwell &amp; Delaney, 2004, p. 561, formula 45): \\(N_{W}=\\frac{N_{B}(1-\\rho)}{2}\\) The division by 2 in the equation is due to the fact that in a two-condition within design every participant provides two data-points. The extent to which this reduces the sample size compared to a between-subject design depends on the correlation (r) between the two dependent variables, as indicated by the 1-r part of the equation. If the correlation is 0, a within-subject design needs half as many participants as a between-subject design (e.g., 64 instead 128 participants), simply because every participants provides 2 datapoints. The higher the correlation, the larger the relative benefit of within designs, and whenever the correlation is negative (up to -1) the relative benefit disappears. Whereas in an independent t-test the two observations are uncorrelated, in a within design the observations are correlated. This has an effect on the standard deviation of the difference scores. In turn, because the standardized effect size is the mean difference divided by the standard deviation of the difference scores, the correlation has an effect on the standardized mean difference in a within design, Cohen’s dz. The relation, as Cohen (1988, formula 2.3.7) explains, is: \\(\\sigma_{z}=\\sigma\\sqrt{2(1-\\rho)}\\) Therefore, the relation between dz and d is \\(\\sqrt{2(1-\\rho)}\\). As Cohen (1988) writes: \"In other words, a given difference between population means for matched (dependent) samples is standardized by a value which is \\(\\sqrt{2(1-\\rho)}\\) as large as would be the case were they independent. If we enter a correlation of 0.5 in the formula, we get \\(\\sqrt{2(0.5)}=1\\). In other words, when the correlation is 0.5, d = dz. When there is a strong correlation between dependent variables, for example r = 0.9, we get \\(d=d_{z}\\sqrt{2(1-0.9)}\\), and a dz of 1 would be a d = 0.45. Reversely, \\(d_{z}=\\frac{d}{\\sqrt{2(1-r)}}\\), so with a r = 0.9, a d of 1 would be a dz = 2.24. Some consider this increase in dz compared to d when observations are strongly correlated an ‘inflation’ when estimating effect sizes, but since the reduction in the standard deviation of the difference scores due to the correlation makes it easier to distinguish signal from noise in a hypothesis test, it leads to a clear power benefit. # Check sample size formula Maxwell # Power is pretty similar with n/2, same d (assuming r = 0.5). # Small differences due to df = 2(n-1) vs df = n-1 pwr.t.test(d = 0.05, n = c(2000, 4000, 8000), sig.level = 0.05, type = &quot;two.sample&quot;, alternative = &quot;two.sided&quot;) ## ## Two-sample t test power calculation ## ## n = 2000, 4000, 8000 ## d = 0.05 ## sig.level = 0.05 ## power = 0.3524674, 0.6086764, 0.8853424 ## alternative = two.sided ## ## NOTE: n is number in *each* group pwr.t.test(d = 0.05, n = c(1000, 2000, 4000), sig.level = 0.05, type = &quot;paired&quot;, alternative = &quot;two.sided&quot;) ## ## Paired t test power calculation ## ## n = 1000, 2000, 4000 ## d = 0.05 ## sig.level = 0.05 ## power = 0.3520450, 0.6083669, 0.8852320 ## alternative = two.sided ## ## NOTE: n is number of *pairs* There is no equivalent fz for Cohen’s f for a within subject ANOVA. For two groups, we can directly compute Cohen’s f from Cohen’s d for two groups, as Cohen (1988) describes, because f = 1/2d. For a d = 0.5, f = 0.25. In Gpower we can run a 2 group within-subject power analysis for ANOVA. We plan for 80% power, and reproduce the anaysis above for the dependent t-test. This works because the correlation is set to 0.5, when d = dz, and thus the transformation of f=1/2d works. If we change the correlation to 0.7 and keep all other settings the same, the repeated measure a-priori power analysis yields a sample of 21. The correlation increases the power for the test. To reproduce this analysis in Gpower with a dependent t-test we need to change dz following the formula above, \\(d_{z}=\\frac{0.5}{\\sqrt{2(1-0.7)}}\\), which yields dz = 0.6454972. If we enter this value in Gpower for an a-priori power analysis, we get the exact same results (as we should, since an repeated measures ANOVA with 2 groups equals a dependent t-test). This example illustrates that the correlation between dependent variables always factors into a power analysis, both for a dependent t-test, and for a repeated measures ANOVA. Because a dependent t-test uses dz the correlation might be less visible, but given the relation between d and dz, the correlation is always taken into account and can greatly improve power for within designs compared to between designs. We can perform both these power analyses using simuations as well. We set groups to 2 for the simulation, n = 34 (which should give 80.777 power, according to the g*power program), a correlation among repeated measures of 0.5, and an alpha of 0.05. In this case, we simulate data with means -0.25 and 0.25, and set the sd to 1. This means we have a mean difference of 0.5, and a Cohen’s d of 0.5/1 = 0.5. In the first example, we set the correlation to 0.5, and the result should be 80.77% power, and an effect size estimate of 0.5 for the simple effect. We also calculate partial eta-squared for the ANOVA, which equals \\(\\frac{f^2}{f^2+1}\\), or 0.05882353. K &lt;- 2 n &lt;- 34 sd &lt;- 1 r &lt;- 0.5 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 78 0.2081 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_slow 78 0.4979 ## ## Within-Subject Factors Included: Check MANOVA Results The results of the simulation are indeed very close to 80.777%. Note that the simulation calculates Cohen’s dz effect sizes for paired comparisons - which here given the correlation of 0.5 is also 0.5 for a medium effect size. We should see a larger dz if we increase the correlation, keeping the sample size the same, following the example in Gpower above. We repeat the simulation, and the only difference is a correlation between dependent variables of 0.7. This should yield an effect size dz = 0.6454972. K &lt;- 2 n &lt;- 21 sd &lt;- 1 r &lt;- 0.7 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design = paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 design_result$sigmatrix ## fast slow ## fast 1.0 0.7 ## slow 0.7 1.0 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 81 0.3225 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_slow 81 0.6848 ## ## Within-Subject Factors Included: Check MANOVA Results #relation dz and f for within designs f &lt;- 0.5*0.6454972 # Entering this f in G*power, with a correlation of 0.5, yields the same as entering f = 0.25 and correlation = 0.7. "],
["repeated-measures-anova-part-2.html", "Chapter 5 Repeated Measures-ANOVA Part 2 5.1 The relation between Cohen’s f and Cohen’s d 5.2 Three within conditions, medium effect size", " Chapter 5 Repeated Measures-ANOVA Part 2 In a repeated measures design multiple observations are collected from the same participants. Here, we will examine a repeated measures experiment with 3 within-subject conditions, to illustrate how a repeated measures ANOVA extends a dependent t-test with 3 groups. In the example for a two-group within design we provided a specific formula for the sample size benefit for two groups. The sample size needed in within-designs (NW) with more than 2 conditions, relative to the sample needed in between-designs (NB), assuming normal distributions and compound symmetry, and ignoring the difference in degrees of freedom between the two types of tests, is (from Maxwell &amp; Delaney, 2004, p. 562, formula 47): \\(N_{W}=\\frac{N_{B}(1-\\rho)}{a}\\) Where a is the number of within-subject levels. 5.1 The relation between Cohen’s f and Cohen’s d Whereas in the case of a repeated measures ANOVA with 2 groups we could explain the principles of a power analysis by comparing our test against a t-test and Cohen’s d, this becomes more difficult when we have more than 2 groups. It is more useful to explain how to directly calculate Cohen’s f, the effect size used in power analyses for ANOVA. Cohen’s f is calculated following Cohen, 1988, formula 8.2.1 and 8.2.2: \\(f = \\sqrt{\\frac{\\frac{\\sum(\\mu-\\overline{\\mu})^2)}N}\\sigma}\\) Imagine we have a within-subject experiment with 3 conditions. We ask people what they mood is when their alarm clock wakes them up, when they wake up naturally on a week day, and when they wake up naturally on a weekend day. Based on pilot data, we expect the means (on a 7 point validated mood scale) are 3.8, 4.2, and 4.3. The standard deviation is 0.9, and the correlation between the dependent measurements is 0.7. We can calculate Cohen’s f for the ANOVA, and Cohen’s dz for the contrasts: mu &lt;- c(3.8, 4.2, 4.3) sd &lt;- 0.9 f &lt;- sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 f ## [1] 0.2400274 r &lt;- 0.7 (4.2-3.8)/0.9/sqrt(2*(1-r)) ## [1] 0.5737753 (4.3-3.8)/0.9/sqrt(2*(1-r)) ## [1] 0.7172191 (4.3-4.2)/0.9/sqrt(2*(1-r)) ## [1] 0.1434438 The relation between Cohen’s d or dz and Cohen’s f becomes more difficult when there are multiple groups, because the relationship depends on the pattern of the means. Cohen (1988) presents calculations for three patterns, minimal variability (for example, for 5 means: -0.25, 0, 0, 0, 0.25), medium variability (for example, for 5 means: -0.25, -0.25, 0.25, 0.25, 0.25 or -0.25, -0.25, -0.25, 0.25, 0.25). For these three patterns, formula’s are available that compute Cohen’s f from Cohen’s d, where d is the effect size calculated for the difference between the largest and smallest mean (if the largest mean is 0.25 and the smallest mean is -0.25, 0.25 - -0.25 = 0.5, so d is 0.5 divided by the standard deviation of 0.9). In our example, d would be (4.3-3.8)/0.9 = 0.5555556. If we divide this value by sqrt(2*(1-r)) we have dz = 0.5555556/0.7745967 = 0.7172191. I have created a custom function that will calculate f from d, based on a specification of one of the three patterns of means. Our pattern is most similar (but not identical) to a maximum variability pattern (two means are high, one is lower). So we could attempt to calculate f from d (0.5555556), by calculating d from the largest and smallest mean: source(&quot;https://raw.githubusercontent.com/Lakens/ANOVA_power_simulation/master/calc_f_d_eta.R&quot;) res &lt;- calc_f_d_eta(mu = mu, sd = sd, variability = &quot;maximum&quot;) res$f ## [1] 0.2618914 res$d ## [1] 0.5555556 We see the Cohen’s f value is 0.2618914 and d = 0.5555556. The Cohen’s f is not perfectly accurate - it is assuming the pattern of means is 3.8, 4.3, 4.3, and not 3.8, 4.2, 4.3. If the means and sd is known, it is best to calculate Cohen’s f directly from these values. 5.2 Three within conditions, medium effect size We can perform power analyses for within designs using simuations. We set groups to 3 for the simulation, n = 20, and the correlation between dependent variables to 0.8. If the true effect size is f = 0.25, and the alpha level is 0.05, the power is 96.6%. In this case, we simulate data with means -0.3061862, 0.0000000, and 0.3061862, and set the sd to 1. K &lt;- 3 n &lt;- 20 sd &lt;- 1 r &lt;- 0.8 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 ## [1] 0.25 design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 99 0.3651 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 60 0.5320 ## p_speed_fast_speed_slow 99 1.0645 ## p_speed_medium_speed_slow 58 0.5259 ## ## Within-Subject Factors Included: Check MANOVA Results The results of the simulation are indeed very close to 96.9%. We can see this is in line with the power estimate from Gpower: We can also validate this by creating the code to do a power analysis in R from scratch: K &lt;- 3 #three groups n &lt;- 20 sd &lt;- 1 r &lt;- 0.8 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.9691634 power_oneway_within(design_result)$eta_p_2 ## [1] 0.05882353 power_oneway_within(design_result)$eta_p_2_SPSS ## [1] 0.3303965 power_oneway_within(design_result)$Cohen_f ## [1] 0.25 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.7024394 We can even check the calculation of Cohen’s f SPSS style in GPower. We take the GPower settings as illustrated above. We click the ‘Options’ button, and check the radiobutton next to ‘As in SPSS’. Click ok, and you will notice that the ‘Corr among rep measures’ field has disappeared. The correlation does not need to be entered seperately, but is incorporated in Cohen’s f. The value of Cohen’s f, which was 0.25, has changed into 0.7024394. This is the SPSS equivalent. The value is much larger. This value, and it’s corresponding partial eta-squared, incorporate the correlation between observations. "],
["repeated-measures-anova-part-3.html", "Chapter 6 Repeated Measures-ANOVA Part 3 6.1 Reproducing Brysbaert 6.2 Reproducing Brysbaert Variation 1 Changing Correlation", " Chapter 6 Repeated Measures-ANOVA Part 3 We first repeat the simulation by Brysbaert: # give sample size N = 75 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give the correlation between the conditions r = .5 # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #also adjusted from original by DL # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test # open library MASS library(&#39;MASS&#39;) # define correlation matrix rho &lt;- cbind(c(1, r, r), c(r, 1, r), c(r, r, 1)) # define participant codes part &lt;- paste(&quot;part&quot;,seq(1:N)) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) data = mvrnorm(n=N, mu=c(0, 0, 0), Sigma=rho) data[,2] = data[,2]+d1 data[,3] = data[,3]+d2 datalong = c(data[,1],data[,2],data[,3]) conds= factor(rep(letters[24:26], each = N)) partID = factor(rep(part, times = 3)) output &lt;-data.frame(partID,conds,datalong) test &lt;- aov(datalong~conds + Error(partID/conds), data=output) tests &lt;- (summary(test)) p1[i] &lt;- tests$&#39;Error: partID:conds&#39;[[1]]$&#39;Pr(&gt;F)&#39;[[1]] p2[i] &lt;- t.test(data[,1],data[,2], paired=TRUE)$p.value p3[i] &lt;- t.test(data[,1],data[,3], paired=TRUE)$p.value p4[i] &lt;- t.test(data[,2],data[,3], paired=TRUE)$p.value } #close(pb)#close progress bar #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.97 sum(p2&lt;alpha2)/nSim ## [1] 0.92 sum(p3&lt;alpha2)/nSim ## [1] 0.93 sum(p4&lt;alpha2)/nSim ## [1] 0.04 6.1 Reproducing Brysbaert We can reproduce the same results as Brysbaeert finds with his code: design &lt;- &quot;3w&quot; n &lt;- 75 mu &lt;- c(0, 0.4, 0.4) sd &lt;- 1 r &lt;- 0.5 labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) We create the within design, and run the simulation design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 97 0.1053 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 92 0.3978903 ## p_speed_fast_speed_slow 90 0.4004933 ## p_speed_medium_speed_slow 7 0.0008825 ## ## Within-Subject Factors Included: Check MANOVA Results #Results The results of the simulation are very similar. Power for the ANOVA F-test is around 95.2%. For the three paired t-tests, power is around 92.7. This is in line with the a-priori power analysis when using g*power: We can perform an post-hoc power analysis in G*power. We can calculate Cohen´s f based on the means and sd, using our own custom formula. # Our simulation is based onthe following means and sd: # mu &lt;- c(0, 0.4, 0.4) # sd &lt;- 1 f &lt;- sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 # We can see why f = 0.5*d. # Imagine 2 group, mu = 1 and 2 # Grand mean is 1.5, we have sqrt(sum(0.5^2 + 0.5^2)/2), or sqrt(0.5/2), = 0.5. # For Cohen&#39;s d we use the difference, 2-1 = 1. The Cohen´s f is 0.1885618. We can enter the f (using the default ’as in G*Power 3.0’ in the option window) and enter a sample size of 75, number of groups as 1, number of measurements as 3, correlation as 0.5. This yields: 6.2 Reproducing Brysbaert Variation 1 Changing Correlation # give sample size N = 75 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give the correlation between the conditions r = .6 #increased correlation # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #also adjusted from original by DL # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test # open library MASS library(&#39;MASS&#39;) # define correlation matrix rho &lt;- cbind(c(1, r, r), c(r, 1, r), c(r, r, 1)) # define participant codes part &lt;- paste(&quot;part&quot;,seq(1:N)) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) data = mvrnorm(n=N, mu=c(0, 0, 0), Sigma=rho) data[,2] = data[,2]+d1 data[,3] = data[,3]+d2 datalong = c(data[,1],data[,2],data[,3]) conds= factor(rep(letters[24:26], each = N)) partID = factor(rep(part, times = 3)) output &lt;-data.frame(partID,conds,datalong) test &lt;- aov(datalong~conds + Error(partID/conds), data=output) tests &lt;- (summary(test)) p1[i] &lt;- tests$&#39;Error: partID:conds&#39;[[1]]$&#39;Pr(&gt;F)&#39;[[1]] p2[i] &lt;- t.test(data[,1],data[,2], paired=TRUE)$p.value p3[i] &lt;- t.test(data[,1],data[,3], paired=TRUE)$p.value p4[i] &lt;- t.test(data[,2],data[,3], paired=TRUE)$p.value } #close(pb)#close progress bar #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 1 sum(p2&lt;alpha2)/nSim ## [1] 0.96 sum(p3&lt;alpha2)/nSim ## [1] 0.96 sum(p4&lt;alpha2)/nSim ## [1] 0.04 design &lt;- &quot;3w&quot; n &lt;- 75 mu &lt;- c(0, 0.4, 0.4) sd &lt;- 1 r &lt;- 0.6 labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) We create the within design, and run the simulation design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 100 0.1237 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 99 0.438119 ## p_speed_fast_speed_slow 99 0.442785 ## p_speed_medium_speed_slow 8 0.002318 ## ## Within-Subject Factors Included: Check MANOVA Results Again, this is similar to g*power for the ANOVA: "]
]
