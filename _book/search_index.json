[
["index.html", "Validation of Superpower Chapter 1 Introduction", " Validation of Superpower Aaron Caldwell &amp; Daniël Lakens 2019-09-12 Chapter 1 Introduction Below we have included various examples of the performance of Superpower against other R packages and statistical programs (such as GPower). "],
["intro.html", "Chapter 2 One-way ANOVA Part 1 2.1 Validation of Power in One-Way ANOVA 2.2 Two conditions", " Chapter 2 One-way ANOVA Part 1 2.1 Validation of Power in One-Way ANOVA Using the formula also used in Albers &amp; Lakens (2018), we can determine the means that should yield a specified effect sizes (expressed in Cohen’s f). Eta-squared (identical to partial eta-squared for One-Way ANOVA’s) has benchmarks of .0099, .0588, and .1379 for small, medium, and large effect sizes (Cohen, 1988). Athough these benchmarks are quite random, and researchers should only use such benchmarks for power analyses as a last resort, we will demonstrate a-priori power analysis for these values. 2.2 Two conditions Imagine we aim to design a study to test the hypothesis that giving people a pet to take care of will increase their life satisfaction. We have a control condition, and a condition where people get a pet, and randomly assign participants to either condition. We can simulate a One-Way ANOVA with a specified alpha, sample size, and effect size, on see the statistical power we would have for the ANOVA and the follow-up comparisons. We expect pets to increase life-satisfaction compared to the control condition. Based on work by Pavot and Diener (1993) we believe that we can expect responses on the life-satifaction scale to have a mean of approximately 24 in our population, with a standard deviation of 6.4. We expect having a pet increases life satisfaction with approximately 2.2 scale points for participants who get a pet. 200 participants in total, with 100 participants in each condition. But before we proceed with the data collection, we examine the statistical power our design would have to detect the differences we predict. string &lt;- &quot;2b&quot; n &lt;- 100 # We are thinking of running 50 peope in each condition mu &lt;- c(24, 26.2) # Enter means in the order that matches the labels below. # In this case, control, cat, dog. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;pet&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 # You should think carefully about how to justify your alpha level. # We will give some examples later, but for now, use 0.05. ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 68 0.03098 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 68 0.3376 The result shows that we have exactly the same power for the ANOVA, as we have for the t-test. This is because when there are only two groups, these tests are mathematically identical. In a study with 100 participants, we would have quite low power (around 67.7%). An ANOVA with 2 groups is identical to a t-test. For our example, Cohen’s d (the standardized mean difference) is 2.2/6.4, or d = 0.34375 for the difference between the control condition and pets, which we can use to easily compute the expected power for these simple comparisons using the pwr package. pwr.t.test(d = 2.2/6.4, n = 100, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.6768572 We can also directly compute Cohen’s f from Cohen’s d for two groups, as Cohen (1988) describes, because f = 1/2d. So f = 0.5*0.34375 = 0.171875. And indeed, power analysis using the pwr package yields the same result using the pwr.anova.test as the power.t.test. K &lt;- 2 n &lt;- 100 f &lt;- 0.171875 pwr.anova.test(n = n, k = K, f = f, sig.level = alpha_level)$power ## [1] 0.6768572 This analysis tells us that running the study with 100 participants in each condition is too likely to not yield a significant test result, even if our expected pattern of differences is true. This is not optimal. Let’s mathematically explore which pattern of means we would need to expect to habe 90% power for the ANOVA with 50 participants in each group. We can use the pwr package in R to compute a sensitivity analysis that tells us the effect size, in Cohen’s f, that we are able to detect with 3 groups and 50 partiicpants in each group, in order to achive 90% power with an alpha level of 5%. K &lt;- 2 n &lt;- 100 sd &lt;- 6.4 r &lt;- 0 #Calculate f when running simulation f &lt;- pwr.anova.test(n = n, k = K, power = 0.9, sig.level = alpha_level)$f f ## [1] 0.2303587 This sensitivity analysis shows we have 90% power in our planned design to detect effects of Cohen’s f of 0.2303587. Benchmarks by Cohen (1988) for small, medium, and large Cohen’s f values are 0.1, 0.25, and 0.4, which correspond to eta-squared values of small (.0099), medium (.0588), and large (.1379), in line with d = .2, .5, or .8. So, at least based on these benchmarks, we have 90% power to detect effects that are slightly below a medium effect benchmark. f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.0503911 Expressed in eta-squared, we can detect values of eta-squared = 0.05 or larger. mu &lt;- mu_from_ES(K = K, ES = ES) mu &lt;- mu * sd mu ## [1] -1.474295 1.474295 We can compute a pattern of means, given a standard deviation of 6.4, that would give us an effect size of f = 0.23, or eta-squared of 0.05. We should be able to accomplish this is the means are -1.474295 and 1.474295. We can use these values to confirm the ANOVA has 90% power. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 85 0.05297 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 85 0.4521 The simulation confirms that for the F-test for the ANOVA we have 90% power. This is also what g*power tells us what would happen based on a post-hoc power analysis with an f of 0.2303587, 2 groups, 200 participants in total (100 in each between subject condition), and an alpha of 5%. If we return to our expected means, how many participants do we need for sufficient power? Given the expected difference and standard deviation, d = 0.34375, and f = 0.171875. We can perform an a-priori power analysis for this simple case, which tells us we need 179 participants in each group (we can’t split people in parts, and thus always round a power analysis upward), or 358 in total. K &lt;- 2 power &lt;- 0.9 f &lt;- 0.171875 pwr.anova.test(power = power, k = K, f = f, sig.level = alpha_level) ## ## Balanced one-way analysis of variance power calculation ## ## k = 2 ## n = 178.8104 ## f = 0.171875 ## sig.level = 0.05 ## power = 0.9 ## ## NOTE: n is number in each group If we re-run the simulation with this sample size, we indeed have 90% power. string &lt;- &quot;2b&quot; n &lt;- 179 mu &lt;- c(24, 26.2) # Enter means in the order that matches the labels below. # In this case, control, pet. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;pet&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 88 0.03184 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_pet 88 0.3459 We stored the result from the power analysis in an object. This allows us to request plots (which are not printed automatically) showing the p-value distribution. If we request power_result$plot1 we get the p-value distribution for the ANOVA: power_result$plot1 If we request power_result$plot2 we get the p-value distribution for the paired comparisons (in this case only one): power_result$plot2 "],
["one-way-anova-part-2.html", "Chapter 3 One-way ANOVA Part 2 3.1 Validation of Power in One-Way ANOVA with Brysbaert example 3.2 Power for simple effects", " Chapter 3 One-way ANOVA Part 2 3.1 Validation of Power in One-Way ANOVA with Brysbaert example 3.1.1 Three conditions Imagine we aim to design a study to test the hypothesis that giving people a pet to take care of will increase their life satisfaction. We have a control condition, a ‘cat’ pet condition, and a ‘dog’ pet condition. We can simulate a One-Way ANOVA with a specified alpha, sample size, and effect size, on see the statistical power we would have for the ANOVA and the follow-up comparisons. We expect all pets to increase life-satisfaction compared to the control condition. Obviously, we also expect the people who are in the ‘dog’ pet condition to have even greater life-satisfaction than people in the ‘cat’ pet condition. Based on work by Pavot and Diener (1993) we believe that we can expect responses on the life-satifaction scale to have a mean of approximately 24 in our population, with a standard deviation of 6.4. We expect having a pet increases life satisfaction with approximately 2.2 scale points for participants who get a cat, and 2.6 scale points for participants who get a dog. We initially consider collecting data from 150 participants in total, with 50 participants in each condition. But before we proceed with the data collection, we examine the statistical power our design would have to detect the differences we predict. string &lt;- &quot;3b&quot; n &lt;- 50 # We are thinking of running 50 peope in each condition mu &lt;- c(24, 26.2, 26.6) # Enter means in the order that matches the labels below. # In this case, control, cat, dog. sd &lt;- 6.4 labelnames &lt;- c(&quot;condition&quot;, &quot;control&quot;, &quot;cat&quot;, &quot;dog&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 # You should think carefully about how to justify your alpha level. # We will give some examples later, but for now, use 0.05. ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 51 0.04367 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_cat 42 0.33881 ## p_condition_control_condition_dog 48 0.40916 ## p_condition_cat_condition_dog 3 0.07102 #should yield #0.3983064 #0.5205162 #0.06104044 The result shows that you would have quite low power with 50 participants, both for the overall ANOVA (just around 50% power), as for the follow up comparisons (approximately 40% power for the control vs cat condition, around 50% for the control vs dogs condition, and a really low power (around 6%, just above the Type 1 error rate of 5%) for the expected difference between cats and dogs. 3.2 Power for simple effects We are typically not just interested in the ANOVA, but also in follow up comparisons. In this case, we would perform a t-test comparing the control condition against the cat and dog condition, and we would compare the cat and dog conditions against each other, in independent t-tests. For our example, Cohen’s d (the standardized mean difference) is 2.2/6.4, or d = 0.34375 for the difference between the control condition and cats, 2.6/6.4 of d = 0.40625 for the difference between the control condition and dogs, and 0.4/6.4 or d = 0.0625 for the difference between cats and dogs as pets. We can easily compute the expected power for these simple comparisons using the pwr package. pwr.t.test(d = 2.2/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.3983064 pwr.t.test(d = 2.6/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.5205162 pwr.t.test(d = 0.4/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.06104044 This analysis tells us that running the study with 50 participants in each condition is more likely to not yield a significant test result, even if our expected pattern of differences is true, than that we will observe a p-value smaller than our alpha level. This is not optimal. Let’s mathematically explore which pattern of means we would need to expect to habe 90% power for the ANOVA with 50 participants in each group. We can use the pwr package in R to compute a sensitivity analysis that tells us the effect size, in Cohen’s f, that we are able to detect with 3 groups and 50 partiicpants in each group, in order to achive 90% power with an alpha level of 5%. K &lt;- 3 n &lt;- 50 sd &lt;- 6.4 r &lt;- 0 #Calculate f when running simulation f &lt;- pwr.anova.test(n = n, k = K, power = 0.9, sig.level = alpha_level)$f f ## [1] 0.2934417 This sensitivity analysis shows we have 90% power in our planned design to detect effects of Cohen’s f of 0.2934417. Benchmarks by Cohen (1988) for small, medium, and large Cohen’s f values are 0.1, 0.25, and 0.4, which correspond to eta-squared values of small (.0099), medium (.0588), and large (.1379), in line with d = .2, .5, or .8. So, at least based on these benchmarks, we have 90% power to detect effects that are somewhat sizeable. f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.07928127 Expressed in eta-squared, we can detect values of eta-squared = 0.0793 or larger. mu &lt;- mu_from_ES(K = K, ES = ES) mu &lt;- mu * sd mu ## [1] -2.300104 0.000000 2.300104 We can compute a pattern of means, given a standard deviation of 6.4, that would give us an effect size of f = 0.2934, or eta-squared of 0.0793. We should be able to accomplish this is the means are -2.300104, 0.000000, and 2.300104. We can use these values to confirm the ANOVA has 90% power. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition 94 0.08936 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_condition_control_condition_cat 45 0.3671 ## p_condition_control_condition_dog 97 0.7215 ## p_condition_cat_condition_dog 38 0.3576 The simulation confirms that for the F-test for the ANOVA we have 90% power. This is also what g*power tells us what would happen based on a post-hoc power analysis with an f of 0.2934417, 3 groups, 150 participants in total (50 in each between subject condition), and an alpha of 5%. We can also compute the power for the ANOVA and simple effects in R with the pwr package. The calculated effect sizes and power match those from the simulation. K &lt;- 3 n &lt;- 50 sd &lt;- 6.4 f &lt;- 0.2934417 pwr.anova.test(n = n, k = K, f = f, sig.level = alpha_level)$power ## [1] 0.9000112 d &lt;- 2.300104/6.4 d ## [1] 0.3593912 pwr.t.test(d = 2.300104/6.4, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.4284243 d &lt;- 2*2.300104/6.4 d ## [1] 0.7187825 pwr.t.test(d = d, n = 50, sig.level = 0.05, type=&quot;two.sample&quot;, alternative=&quot;two.sided&quot;)$power ## [1] 0.9450353 We can also compare the results against the analytic solution by Aberson (2019). First, load the function for a 3-way ANOVA. anova1f_3&lt;-function(m1=NULL,m2=NULL,m3=NULL,s1=NULL,s2=NULL,s3=NULL,n1=NULL,n2=NULL,n3=NULL,alpha=.05){ x&lt;-stats::rnorm(n1,m1,s1) X&lt;-x MEAN&lt;-m1 SD&lt;-s1 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A1&quot;,n1) l1&lt;-data.frame(y, group) x&lt;-stats::rnorm(n2,m2,s2) X&lt;-x MEAN&lt;-m2 SD&lt;-s2 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A2&quot;,n2) l2&lt;-data.frame(y, group) x&lt;-stats::rnorm(n3,m3,s3) X&lt;-x MEAN&lt;-m3 SD&lt;-s3 Z &lt;- (((X - mean(X, na.rm = TRUE))/stats::sd(X, na.rm = TRUE))) * SD y&lt;-MEAN + Z group&lt;-rep(&quot;A3&quot;,n3) l3&lt;-data.frame(y, group) simdat&lt;-rbind(l1,l2,l3) anova&lt;-stats::aov(y~group, data=simdat) anova&lt;-car::Anova(anova, type=&quot;III&quot;) SSA&lt;-anova[2,1] #column, row SSwin&lt;-anova[3,1] dfwin&lt;-anova[3,2] dfbg&lt;-anova[2,2] eta2&lt;-SSA/(SSA+SSwin) f2&lt;-eta2/(1-eta2) lambda&lt;-f2*dfwin minusalpha&lt;-1-alpha Ft&lt;-stats::qf(minusalpha, dfbg, dfwin) power&lt;-1-stats::pf(Ft, dfbg,dfwin,lambda) list(Power = power)} Then we use the function to calculate power. #Initial example, low power anova1f_3(m1=24, m2=26.2, m3=26.6, s1=6.4, s2=6.4, s3=6.4, n1=50, n2=50, n3=50, alpha=.05) ## $Power ## [1] 0.4769468 #From: Aberson, Christopher L. Applied Power Analysis for the Behavioral Sciences, 2nd Edition. # $Power [1] 0.4769468 #Later example, based on larger mean difference anova1f_3(m1=-2.300104, m2=0, m3=2.300104, s1=6.4, s2=6.4, s3=6.4, n1=50, n2=50, n3=50, alpha=.05) ## $Power ## [1] 0.9000112 # $Power [1] 0.9000112 "],
["one-way-anova-part-3.html", "Chapter 4 One-way ANOVA Part 3 4.1 Three conditions replication 4.2 Variation 1 4.3 Three conditions replication 4.4 Variation 2 4.5 Three conditions replication", " Chapter 4 One-way ANOVA Part 3 We first repeat the simulation by Brysbaert: # Simulations to estimate the power of an ANOVA with three unrelated groups # the effect between the two extreme groups is set to d = .4, the effect for the third group is d = .4 (see below for other situations) # we use the built-in aov-test command # give sample sizes (all samples sizes are equal) N = 90 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.78 sum(p2&lt;alpha2)/nSim ## [1] 0.79 sum(p3&lt;alpha2)/nSim ## [1] 0.75 sum(p4&lt;alpha2)/nSim ## [1] 0.05 mean(pes1) ## [1] 0.03991806 mean(pes2) ## [1] 0.04217779 4.1 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.4) n &lt;- 90 sd &lt;- 1 r &lt;- 0 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 75 0.04077 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 68 0.38069 ## p_factor1_level1_factor1_level3 75 0.39698 ## p_factor1_level2_factor1_level3 6 0.01633 4.2 Variation 1 # give sample sizes (all samples sizes are equal) N = 145 # give effect size d d1 = .4 #difference between the extremes d2 = .0 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.93 sum(p2&lt;alpha2)/nSim ## [1] 0.93 sum(p3&lt;alpha2)/nSim ## [1] 0.04 sum(p4&lt;alpha2)/nSim ## [1] 0.91 mean(pes1) ## [1] 0.03667014 mean(pes2) ## [1] 0.04097379 4.3 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.0) n &lt;- 145 sd &lt;- 1 r &lt;- 0 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 91 0.03862 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 92 0.394129 ## p_factor1_level1_factor1_level3 10 -0.004107 ## p_factor1_level2_factor1_level3 89 -0.395701 4.4 Variation 2 # give sample sizes (all samples sizes are equal) N = 82 # give effect size d d1 = .4 #difference between the extremes d2 = .2 #third condition goes with the highest extreme # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #alpha level for three post hoc one-tailed t-tests Bonferroni correction # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test pes1 &lt;-numeric(nSim) #partial eta-squared pes2 &lt;-numeric(nSim) #partial eta-squared two extreme conditions library(lsr) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) x&lt;-rnorm(n = N, mean = 0, sd = 1) y&lt;-rnorm(n = N, mean = d1, sd = 1) z&lt;-rnorm(n = N, mean = d2, sd = 1) data = c(x,y,z) groups= factor(rep(letters[24:26], each = N)) test &lt;- aov(data~groups) pes1[i] &lt;- etaSquared(test)[1,2] p1[i] &lt;- summary(test)[[1]][[&quot;Pr(&gt;F)&quot;]][[1]] p2[i] &lt;- t.test(x,y)$p.value p3[i] &lt;- t.test(x,z)$p.value p4[i] &lt;- t.test(y,z)$p.value data = c(x,y) groups= factor(rep(letters[24:25], each = N)) test &lt;- aov(data~groups) pes2[i] &lt;- etaSquared(test)[1,2] } #close(pb)#close progress bar # results are as predicted when omnibus ANOVA is significant, t-tests are significant between x and y plus x and z; not significant between y and z #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.66 sum(p2&lt;alpha2)/nSim ## [1] 0.76 sum(p3&lt;alpha2)/nSim ## [1] 0.23 sum(p4&lt;alpha2)/nSim ## [1] 0.3 mean(pes1) ## [1] 0.03664839 mean(pes2) ## [1] 0.0473189 4.5 Three conditions replication K &lt;- 3 mu &lt;- c(0, 0.4, 0.2) n &lt;- 82 sd &lt;- 1 design =paste(K,&quot;b&quot;,sep=&quot;&quot;) design_result &lt;- ANOVA_design(design =string, n = n, mu = mu, sd = sd, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 59 0.03399 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 70 0.3975 ## p_factor1_level1_factor1_level3 22 0.1689 ## p_factor1_level2_factor1_level3 35 -0.2293 "],
["repeated-measures-anova-part-1.html", "Chapter 5 Repeated Measures-ANOVA Part 1 5.1 Two conditions, medium effect size", " Chapter 5 Repeated Measures-ANOVA Part 1 In a repeated measures design multiple observations are collected from the same participants. In the simplest case, where there are two repeated observations, a repeated measures ANOVA equals a dependent or paired t-test. The difference compared to a between subject design is that repeated measures can be correlated, and in psychology, they often are. Let’s first explore the impact of this correlation on the power of a repeated measures ANOVA. 5.1 Two conditions, medium effect size To illustrate the effect of correated observations, we start by simulating data for a medium effect size for a dependent (or paired, or within-subject) t-test. Let’s first look at G*power. If we want to perform an a-priori power analysis, we are asked to fill in the effect size dz. As Cohen (1988) writes, “The Z subscript is used to emphasize the fact that our raw score unit is no longer X or Y, but Z”, where Z are the difference scores of X-Y. Within designs can have greater power to detect differences than between designs because the values are correlated, and a within design requires less participants because each participant provides multiple observations. One difference between an independent t-test and a dependent t-test is that an independent t-test has 2(n-1) degrees of freedom, while a dependent t-test has (n-1) degrees of freedom. The sample size needed in a two-group within-design (NW) relative to the sample needed in two-group between-designs (NB), assuming normal distributions, and ignoring the difference in degrees of freedom between the two types of tests, is (from Maxwell &amp; Delaney, 2004, p. 561, formula 45): \\(N_{W}=\\frac{N_{B}(1-\\rho)}{2}\\) The division by 2 in the equation is due to the fact that in a two-condition within design every participant provides two data-points. The extent to which this reduces the sample size compared to a between-subject design depends on the correlation (r) between the two dependent variables, as indicated by the 1-r part of the equation. If the correlation is 0, a within-subject design needs half as many participants as a between-subject design (e.g., 64 instead 128 participants), simply because every participants provides 2 datapoints. The higher the correlation, the larger the relative benefit of within designs, and whenever the correlation is negative (up to -1) the relative benefit disappears. Whereas in an independent t-test the two observations are uncorrelated, in a within design the observations are correlated. This has an effect on the standard deviation of the difference scores. In turn, because the standardized effect size is the mean difference divided by the standard deviation of the difference scores, the correlation has an effect on the standardized mean difference in a within design, Cohen’s dz. The relation, as Cohen (1988, formula 2.3.7) explains, is: \\(\\sigma_{z}=\\sigma\\sqrt{2(1-\\rho)}\\) Therefore, the relation between dz and d is \\(\\sqrt{2(1-\\rho)}\\). As Cohen (1988) writes: \"In other words, a given difference between population means for matched (dependent) samples is standardized by a value which is \\(\\sqrt{2(1-\\rho)}\\) as large as would be the case were they independent. If we enter a correlation of 0.5 in the formula, we get \\(\\sqrt{2(0.5)}=1\\). In other words, when the correlation is 0.5, d = dz. When there is a strong correlation between dependent variables, for example r = 0.9, we get \\(d=d_{z}\\sqrt{2(1-0.9)}\\), and a dz of 1 would be a d = 0.45. Reversely, \\(d_{z}=\\frac{d}{\\sqrt{2(1-r)}}\\), so with a r = 0.9, a d of 1 would be a dz = 2.24. Some consider this increase in dz compared to d when observations are strongly correlated an ‘inflation’ when estimating effect sizes, but since the reduction in the standard deviation of the difference scores due to the correlation makes it easier to distinguish signal from noise in a hypothesis test, it leads to a clear power benefit. # Check sample size formula Maxwell # Power is pretty similar with n/2, same d (assuming r = 0.5). # Small differences due to df = 2(n-1) vs df = n-1 pwr.t.test(d = 0.05, n = c(2000, 4000, 8000), sig.level = 0.05, type = &quot;two.sample&quot;, alternative = &quot;two.sided&quot;) ## ## Two-sample t test power calculation ## ## n = 2000, 4000, 8000 ## d = 0.05 ## sig.level = 0.05 ## power = 0.3524674, 0.6086764, 0.8853424 ## alternative = two.sided ## ## NOTE: n is number in *each* group pwr.t.test(d = 0.05, n = c(1000, 2000, 4000), sig.level = 0.05, type = &quot;paired&quot;, alternative = &quot;two.sided&quot;) ## ## Paired t test power calculation ## ## n = 1000, 2000, 4000 ## d = 0.05 ## sig.level = 0.05 ## power = 0.3520450, 0.6083669, 0.8852320 ## alternative = two.sided ## ## NOTE: n is number of *pairs* There is no equivalent fz for Cohen’s f for a within subject ANOVA. For two groups, we can directly compute Cohen’s f from Cohen’s d for two groups, as Cohen (1988) describes, because f = 1/2d. For a d = 0.5, f = 0.25. In Gpower we can run a 2 group within-subject power analysis for ANOVA. We plan for 80% power, and reproduce the anaysis above for the dependent t-test. This works because the correlation is set to 0.5, when d = dz, and thus the transformation of f=1/2d works. If we change the correlation to 0.7 and keep all other settings the same, the repeated measure a-priori power analysis yields a sample of 21. The correlation increases the power for the test. To reproduce this analysis in Gpower with a dependent t-test we need to change dz following the formula above, \\(d_{z}=\\frac{0.5}{\\sqrt{2(1-0.7)}}\\), which yields dz = 0.6454972. If we enter this value in Gpower for an a-priori power analysis, we get the exact same results (as we should, since an repeated measures ANOVA with 2 groups equals a dependent t-test). This example illustrates that the correlation between dependent variables always factors into a power analysis, both for a dependent t-test, and for a repeated measures ANOVA. Because a dependent t-test uses dz the correlation might be less visible, but given the relation between d and dz, the correlation is always taken into account and can greatly improve power for within designs compared to between designs. We can perform both these power analyses using simuations as well. We set groups to 2 for the simulation, n = 34 (which should give 80.777 power, according to the g*power program), a correlation among repeated measures of 0.5, and an alpha of 0.05. In this case, we simulate data with means -0.25 and 0.25, and set the sd to 1. This means we have a mean difference of 0.5, and a Cohen’s d of 0.5/1 = 0.5. In the first example, we set the correlation to 0.5, and the result should be 80.77% power, and an effect size estimate of 0.5 for the simple effect. We also calculate partial eta-squared for the ANOVA, which equals \\(\\frac{f^2}{f^2+1}\\), or 0.05882353. K &lt;- 2 n &lt;- 34 sd &lt;- 1 r &lt;- 0.5 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 83 0.2378 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_slow 83 0.5481 ## ## Within-Subject Factors Included: Check MANOVA Results The results of the simulation are indeed very close to 80.777%. Note that the simulation calculates Cohen’s dz effect sizes for paired comparisons - which here given the correlation of 0.5 is also 0.5 for a medium effect size. We should see a larger dz if we increase the correlation, keeping the sample size the same, following the example in Gpower above. We repeat the simulation, and the only difference is a correlation between dependent variables of 0.7. This should yield an effect size dz = 0.6454972. K &lt;- 2 n &lt;- 21 sd &lt;- 1 r &lt;- 0.7 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design = paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 design_result$sigmatrix ## fast slow ## fast 1.0 0.7 ## slow 0.7 1.0 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 87 0.3233 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_slow 87 0.6832 ## ## Within-Subject Factors Included: Check MANOVA Results #relation dz and f for within designs f &lt;- 0.5*0.6454972 # Entering this f in G*power, with a correlation of 0.5, yields the same as entering f = 0.25 and correlation = 0.7. "],
["repeated-measures-anova-part-2.html", "Chapter 6 Repeated Measures-ANOVA Part 2 6.1 The relation between Cohen’s f and Cohen’s d 6.2 Three within conditions, medium effect size", " Chapter 6 Repeated Measures-ANOVA Part 2 In a repeated measures design multiple observations are collected from the same participants. Here, we will examine a repeated measures experiment with 3 within-subject conditions, to illustrate how a repeated measures ANOVA extends a dependent t-test with 3 groups. In the example for a two-group within design we provided a specific formula for the sample size benefit for two groups. The sample size needed in within-designs (NW) with more than 2 conditions, relative to the sample needed in between-designs (NB), assuming normal distributions and compound symmetry, and ignoring the difference in degrees of freedom between the two types of tests, is (from Maxwell &amp; Delaney, 2004, p. 562, formula 47): \\(N_{W}=\\frac{N_{B}(1-\\rho)}{a}\\) Where a is the number of within-subject levels. 6.1 The relation between Cohen’s f and Cohen’s d Whereas in the case of a repeated measures ANOVA with 2 groups we could explain the principles of a power analysis by comparing our test against a t-test and Cohen’s d, this becomes more difficult when we have more than 2 groups. It is more useful to explain how to directly calculate Cohen’s f, the effect size used in power analyses for ANOVA. Cohen’s f is calculated following Cohen, 1988, formula 8.2.1 and 8.2.2: \\(f = \\sqrt{\\frac{\\frac{\\sum(\\mu-\\overline{\\mu})^2)}N}\\sigma}\\) Imagine we have a within-subject experiment with 3 conditions. We ask people what they mood is when their alarm clock wakes them up, when they wake up naturally on a week day, and when they wake up naturally on a weekend day. Based on pilot data, we expect the means (on a 7 point validated mood scale) are 3.8, 4.2, and 4.3. The standard deviation is 0.9, and the correlation between the dependent measurements is 0.7. We can calculate Cohen’s f for the ANOVA, and Cohen’s dz for the contrasts: mu &lt;- c(3.8, 4.2, 4.3) sd &lt;- 0.9 f &lt;- sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 f ## [1] 0.2400274 r &lt;- 0.7 (4.2-3.8)/0.9/sqrt(2*(1-r)) ## [1] 0.5737753 (4.3-3.8)/0.9/sqrt(2*(1-r)) ## [1] 0.7172191 (4.3-4.2)/0.9/sqrt(2*(1-r)) ## [1] 0.1434438 The relation between Cohen’s d or dz and Cohen’s f becomes more difficult when there are multiple groups, because the relationship depends on the pattern of the means. Cohen (1988) presents calculations for three patterns, minimal variability (for example, for 5 means: -0.25, 0, 0, 0, 0.25), medium variability (for example, for 5 means: -0.25, -0.25, 0.25, 0.25, 0.25 or -0.25, -0.25, -0.25, 0.25, 0.25). For these three patterns, formula’s are available that compute Cohen’s f from Cohen’s d, where d is the effect size calculated for the difference between the largest and smallest mean (if the largest mean is 0.25 and the smallest mean is -0.25, 0.25 - -0.25 = 0.5, so d is 0.5 divided by the standard deviation of 0.9). In our example, d would be (4.3-3.8)/0.9 = 0.5555556. If we divide this value by sqrt(2*(1-r)) we have dz = 0.5555556/0.7745967 = 0.7172191. I have created a custom function that will calculate f from d, based on a specification of one of the three patterns of means. Our pattern is most similar (but not identical) to a maximum variability pattern (two means are high, one is lower). So we could attempt to calculate f from d (0.5555556), by calculating d from the largest and smallest mean: source(&quot;https://raw.githubusercontent.com/Lakens/ANOVA_power_simulation/master/calc_f_d_eta.R&quot;) res &lt;- calc_f_d_eta(mu = mu, sd = sd, variability = &quot;maximum&quot;) res$f ## [1] 0.2618914 res$d ## [1] 0.5555556 We see the Cohen’s f value is 0.2618914 and d = 0.5555556. The Cohen’s f is not perfectly accurate - it is assuming the pattern of means is 3.8, 4.3, 4.3, and not 3.8, 4.2, 4.3. If the means and sd is known, it is best to calculate Cohen’s f directly from these values. 6.2 Three within conditions, medium effect size We can perform power analyses for within designs using simuations. We set groups to 3 for the simulation, n = 20, and the correlation between dependent variables to 0.8. If the true effect size is f = 0.25, and the alpha level is 0.05, the power is 96.6%. In this case, we simulate data with means -0.3061862, 0.0000000, and 0.3061862, and set the sd to 1. K &lt;- 3 n &lt;- 20 sd &lt;- 1 r &lt;- 0.8 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 ## [1] 0.25 design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) alpha_level &lt;- 0.05 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 98 0.3359 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 53 0.4779 ## p_speed_fast_speed_slow 98 0.9904 ## p_speed_medium_speed_slow 49 0.4986 ## ## Within-Subject Factors Included: Check MANOVA Results The results of the simulation are indeed very close to 96.9%. We can see this is in line with the power estimate from Gpower: We can also validate this by creating the code to do a power analysis in R from scratch: K &lt;- 3 #three groups n &lt;- 20 sd &lt;- 1 r &lt;- 0.8 alpha = 0.05 f &lt;- 0.25 f2 &lt;- f^2 ES &lt;- f2/(f2+1) ES ## [1] 0.05882353 mu &lt;- mu_from_ES(K = K, ES = ES) design =paste(K,&quot;w&quot;,sep=&quot;&quot;) labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.9691634 power_oneway_within(design_result)$eta_p_2 ## [1] 0.05882353 power_oneway_within(design_result)$eta_p_2_SPSS ## [1] 0.3303965 power_oneway_within(design_result)$Cohen_f ## [1] 0.25 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.7024394 We can even check the calculation of Cohen’s f SPSS style in GPower. We take the GPower settings as illustrated above. We click the ‘Options’ button, and check the radiobutton next to ‘As in SPSS’. Click ok, and you will notice that the ‘Corr among rep measures’ field has disappeared. The correlation does not need to be entered seperately, but is incorporated in Cohen’s f. The value of Cohen’s f, which was 0.25, has changed into 0.7024394. This is the SPSS equivalent. The value is much larger. This value, and it’s corresponding partial eta-squared, incorporate the correlation between observations. "],
["repeated-measures-anova-part-3.html", "Chapter 7 Repeated Measures-ANOVA Part 3 7.1 Reproducing Brysbaert 7.2 Reproducing Brysbaert Variation 1 Changing Correlation", " Chapter 7 Repeated Measures-ANOVA Part 3 We first repeat the simulation by Brysbaert: # give sample size N = 75 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give the correlation between the conditions r = .5 # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #also adjusted from original by DL # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test # open library MASS library(&#39;MASS&#39;) # define correlation matrix rho &lt;- cbind(c(1, r, r), c(r, 1, r), c(r, r, 1)) # define participant codes part &lt;- paste(&quot;part&quot;,seq(1:N)) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) data = mvrnorm(n=N, mu=c(0, 0, 0), Sigma=rho) data[,2] = data[,2]+d1 data[,3] = data[,3]+d2 datalong = c(data[,1],data[,2],data[,3]) conds= factor(rep(letters[24:26], each = N)) partID = factor(rep(part, times = 3)) output &lt;-data.frame(partID,conds,datalong) test &lt;- aov(datalong~conds + Error(partID/conds), data=output) tests &lt;- (summary(test)) p1[i] &lt;- tests$&#39;Error: partID:conds&#39;[[1]]$&#39;Pr(&gt;F)&#39;[[1]] p2[i] &lt;- t.test(data[,1],data[,2], paired=TRUE)$p.value p3[i] &lt;- t.test(data[,1],data[,3], paired=TRUE)$p.value p4[i] &lt;- t.test(data[,2],data[,3], paired=TRUE)$p.value } #close(pb)#close progress bar #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 0.98 sum(p2&lt;alpha2)/nSim ## [1] 0.94 sum(p3&lt;alpha2)/nSim ## [1] 0.99 sum(p4&lt;alpha2)/nSim ## [1] 0.03 7.1 Reproducing Brysbaert We can reproduce the same results as Brysbaeert finds with his code: design &lt;- &quot;3w&quot; n &lt;- 75 mu &lt;- c(0, 0.4, 0.4) sd &lt;- 1 r &lt;- 0.5 labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) We create the within design, and run the simulation design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 92 0.09985 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 93 0.37930 ## p_speed_fast_speed_slow 88 0.39253 ## p_speed_medium_speed_slow 9 0.01202 ## ## Within-Subject Factors Included: Check MANOVA Results #Results The results of the simulation are very similar. Power for the ANOVA F-test is around 95.2%. For the three paired t-tests, power is around 92.7. This is in line with the a-priori power analysis when using g*power: We can perform an post-hoc power analysis in G*power. We can calculate Cohen´s f based on the means and sd, using our own custom formula. # Our simulation is based onthe following means and sd: # mu &lt;- c(0, 0.4, 0.4) # sd &lt;- 1 f &lt;- sqrt(sum((mu-mean(mu))^2)/length(mu))/sd #Cohen, 1988, formula 8.2.1 and 8.2.2 # We can see why f = 0.5*d. # Imagine 2 group, mu = 1 and 2 # Grand mean is 1.5, we have sqrt(sum(0.5^2 + 0.5^2)/2), or sqrt(0.5/2), = 0.5. # For Cohen&#39;s d we use the difference, 2-1 = 1. The Cohen´s f is 0.1885618. We can enter the f (using the default ’as in G*Power 3.0’ in the option window) and enter a sample size of 75, number of groups as 1, number of measurements as 3, correlation as 0.5. This yields: 7.2 Reproducing Brysbaert Variation 1 Changing Correlation # give sample size N = 75 # give effect size d d1 = .4 #difference between the extremes d2 = .4 #third condition goes with the highest extreme # give the correlation between the conditions r = .6 #increased correlation # give number of simulations nSim = nsims # give alpha levels alpha1 = .05 #alpha level for the omnibus ANOVA alpha2 = .05 #also adjusted from original by DL # create progress bar in case it takes a while #pb &lt;- winProgressBar(title = &quot;progress bar&quot;, min = 0, max = nSim, width = 300) # create vectors to store p-values p1 &lt;-numeric(nSim) #p-value omnibus ANOVA p2 &lt;-numeric(nSim) #p-value first post hoc test p3 &lt;-numeric(nSim) #p-value second post hoc test p4 &lt;-numeric(nSim) #p-value third post hoc test # open library MASS library(&#39;MASS&#39;) # define correlation matrix rho &lt;- cbind(c(1, r, r), c(r, 1, r), c(r, r, 1)) # define participant codes part &lt;- paste(&quot;part&quot;,seq(1:N)) for(i in 1:nSim){ #for each simulated experiment # setWinProgressBar(pb, i, title=paste(round(i/nSim*100, 1), &quot;% done&quot;)) data = mvrnorm(n=N, mu=c(0, 0, 0), Sigma=rho) data[,2] = data[,2]+d1 data[,3] = data[,3]+d2 datalong = c(data[,1],data[,2],data[,3]) conds= factor(rep(letters[24:26], each = N)) partID = factor(rep(part, times = 3)) output &lt;-data.frame(partID,conds,datalong) test &lt;- aov(datalong~conds + Error(partID/conds), data=output) tests &lt;- (summary(test)) p1[i] &lt;- tests$&#39;Error: partID:conds&#39;[[1]]$&#39;Pr(&gt;F)&#39;[[1]] p2[i] &lt;- t.test(data[,1],data[,2], paired=TRUE)$p.value p3[i] &lt;- t.test(data[,1],data[,3], paired=TRUE)$p.value p4[i] &lt;- t.test(data[,2],data[,3], paired=TRUE)$p.value } #close(pb)#close progress bar #printing all unique tests (adjusted code by DL) sum(p1&lt;alpha1)/nSim ## [1] 1 sum(p2&lt;alpha2)/nSim ## [1] 0.99 sum(p3&lt;alpha2)/nSim ## [1] 0.99 sum(p4&lt;alpha2)/nSim ## [1] 0.04 design &lt;- &quot;3w&quot; n &lt;- 75 mu &lt;- c(0, 0.4, 0.4) sd &lt;- 1 r &lt;- 0.6 labelnames &lt;- c(&quot;speed&quot;, &quot;fast&quot;, &quot;medium&quot;, &quot;slow&quot;) We create the within design, and run the simulation design_result &lt;- ANOVA_design(design = design, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_speed 100 0.137 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_speed_fast_speed_medium 99 0.48598 ## p_speed_fast_speed_slow 99 0.45987 ## p_speed_medium_speed_slow 4 -0.01575 ## ## Within-Subject Factors Included: Check MANOVA Results Again, this is similar to g*power for the ANOVA: "],
["mixed-anova-part-1.html", "Chapter 8 Mixed ANOVA Part 1 8.1 Two by two ANOVA, within-between design 8.2 Two by two ANOVA, within-between design Variation 1", " Chapter 8 Mixed ANOVA Part 1 8.1 Two by two ANOVA, within-between design We can simulate a Two-Way ANOVA with a specific alpha, sample size and effect size, to achieve a specified statistical power. We wil try to reproduce the power analysis by g*power for an F-test, ANOVA: Repeated measures, within-between interaction. For the 2-way interaction, the result should be a power of 91.25% is we have a total samplesize of 46. Since we have 2 groups in the between factor that means the sample size per group is 2 (and both these groups collect 2 repeated measures). mu &lt;- c(-0.25, 0.25, 0.25, -0.25) n &lt;- 23 sd &lt;- 1 r &lt;- 0.5 string = &quot;2w*2b&quot; alpha_level &lt;- 0.05 labelnames = c(&quot;age&quot;, &quot;old&quot;, &quot;young&quot;, &quot;color&quot;, &quot;blue&quot;, &quot;red&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_color 8 0.02427 ## anova_age 7 0.02690 ## anova_color:age 93 0.21522 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_age_old_color_blue_age_old_color_red 35 0.50976 ## p_age_old_color_blue_age_young_color_blue 60 0.49707 ## p_age_old_color_blue_age_young_color_red 8 -0.02018 ## p_age_old_color_red_age_young_color_blue 9 -0.02029 ## p_age_old_color_red_age_young_color_red 67 -0.53918 ## p_age_young_color_blue_age_young_color_red 37 -0.50594 ## ## Within-Subject Factors Included: Check MANOVA Results 8.2 Two by two ANOVA, within-between design Variation 1 We can simulate the same Two-Way ANOVA increasing the correlation to 0.7. mu &lt;- c(-0.25, 0.25, 0.25, -0.25) n &lt;- 23 sd &lt;- 1 r &lt;- 0.7 string = &quot;2w*2b&quot; alpha_level &lt;- 0.05 labelnames = c(&quot;age&quot;, &quot;old&quot;, &quot;young&quot;, &quot;color&quot;, &quot;blue&quot;, &quot;red&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_color 3 0.01622 ## anova_age 4 0.02375 ## anova_color:age 98 0.28303 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_age_old_color_blue_age_old_color_red 34 0.483890 ## p_age_old_color_blue_age_young_color_blue 83 0.649846 ## p_age_old_color_blue_age_young_color_red 1 0.020264 ## p_age_old_color_red_age_young_color_blue 4 0.002914 ## p_age_old_color_red_age_young_color_red 75 -0.600516 ## p_age_young_color_blue_age_young_color_red 31 -0.469456 ## ## Within-Subject Factors Included: Check MANOVA Results "],
["mixed-anova-part-2.html", "Chapter 9 Mixed ANOVA Part 2 9.1 Two by two ANOVA, within-within design 9.2 Examine variation of means and correlation", " Chapter 9 Mixed ANOVA Part 2 9.1 Two by two ANOVA, within-within design We can simulate a 2x2 ANOVA, both factors manipulated within participants, with a specific sample size and effect size, to achieve a desired statistical power. As Potvin &amp; Schutz (2000) explain, analytic procedures for a two-factor repeated measures ANOVA do not seem to exist. The main problem is quantifying the error variance (the denominator when calculating lambda or Cohen’s f). Simulation based aproaches provide a solution. We can reproduce the simulation coded by Ben Amsel knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE) # define the parameters mu = c(700, 670, 670, 700) # true effects (in this case, a double dissociation) sigma = 150 # population standard deviation rho = 0.75 # correlation between repeated measures nsubs = 25 # how many subjects? nsims = nsims # how many simulation replicates? # create 2 factors representing the 2 independent variables cond = data.frame( X1 = rep(factor(letters[1:2]), nsubs * 2), X2 = rep(factor(letters[1:2]), nsubs, each=2)) # create a subjects factor subject = factor(sort(rep(1:nsubs, 4))) # combine above into the design matrix dm = data.frame(subject, cond) Build Sigma: the population variance-covariance matrix # create k x k matrix populated with sigma sigma.mat &lt;- rep(sigma, 4) S &lt;- matrix(sigma.mat, ncol=length(sigma.mat), nrow=length(sigma.mat)) # compute covariance between measures Sigma &lt;- t(S) * S * rho # put the variances on the diagonal diag(Sigma) &lt;- sigma^2 Run the simulation # stack &#39;nsims&#39; individual data frames into one large data frame df = dm[rep(seq_len(nrow(dm)), nsims), ] # add an index column to track the simulation run df$simID = sort(rep(seq_len(nsims), nrow(dm))) # sample the observed data from a multivariate normal distribution # using MASS::mvrnorm with the parameters mu and Sigma created earlier # and bind to the existing df require(MASS) make.y = expression(as.vector(t(mvrnorm(nsubs, mu, Sigma)))) df$y = as.vector(replicate(nsims, eval(make.y))) # use do(), the general purpose complement to the specialized data # manipulation functions available in dplyr, to run the ANOVA on # each section of the grouped data frame created by group_by require(dplyr) require(car) require(broom) mods &lt;- df %&gt;% group_by(simID) %&gt;% do(model = aov(y ~ X1 * X2 + Error(subject / (X1*X2)), qr=FALSE, data = .)) # extract p-values for each effect and store in a data frame p = data.frame( mods %&gt;% do(as.data.frame(tidy(.$model[[3]])$p.value[1])), mods %&gt;% do(as.data.frame(tidy(.$model[[4]])$p.value[1])), mods %&gt;% do(as.data.frame(tidy(.$model[[5]])$p.value[1]))) colnames(p) = c(&#39;X1&#39;,&#39;X2&#39;,&#39;Interaction&#39;) The empirical power is easy to compute, it’s just the proportion of simulation runs where p &lt;. 05. power.res = apply(as.matrix(p), 2, function(x) round(mean(ifelse(x &lt; .05, 1, 0) * 100),2)) power.res ## X1 X2 Interaction ## 5 6 43 Visualize the distributions of p-values # plot the known effects require(ggplot2) require(gridExtra) means = data.frame(cond[1:4, ], mu, SE = sigma / sqrt(nsubs)) plt1 = ggplot(means, aes(y = mu, x = X1, fill=X2)) + geom_bar(position = position_dodge(), stat=&quot;identity&quot;) + geom_errorbar(aes(ymin = mu-SE, ymax = mu+SE), position = position_dodge(width=0.9), size=.6, width=.3) + coord_cartesian(ylim=c((.7*min(mu)), 1.2*max(mu))) + theme_bw() # melt the data into a ggplot friendly &#39;long&#39; format require(reshape2) plotData &lt;- melt(p, value.name = &#39;p&#39;) # plot each of the p-value distributions on a log scale options(scipen = 999) # &#39;turn off&#39; scientific notation plt2 = ggplot(plotData, aes(x = p)) + scale_x_log10(breaks=c(1, 0.05, 0.001), labels=c(1, 0.05, 0.001)) + geom_histogram(colour = &quot;darkblue&quot;, fill = &quot;white&quot;) + geom_vline(xintercept = 0.05, colour=&#39;red&#39;) + facet_grid(variable ~ .) + labs(x = expression(Log[10]~P)) + theme(axis.text.x = element_text(color=&#39;black&#39;, size=7)) # arrange plots side by side and print grid.arrange(plt1, plt2, nrow=1) We can reproduce this simulation: mu = c(700, 670, 670, 700) # true effects (in this case, a double dissociation) sigma = 150 # population standard deviation n &lt;- 25 sd &lt;- 150 r &lt;- 0.75 string = &quot;2w*2w&quot; alpha_level &lt;- 0.05 labelnames = c(&quot;age&quot;, &quot;old&quot;, &quot;young&quot;, &quot;color&quot;, &quot;blue&quot;, &quot;red&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_age 7 0.04236 ## anova_color 4 0.03241 ## anova_age:color 49 0.15675 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_age_old_color_blue_age_old_color_red 24 -0.258790 ## p_age_old_color_blue_age_young_color_blue 23 -0.262761 ## p_age_old_color_blue_age_young_color_red 2 0.041110 ## p_age_old_color_red_age_young_color_blue 5 -0.007621 ## p_age_old_color_red_age_young_color_red 25 0.307380 ## p_age_young_color_blue_age_young_color_red 28 0.309019 ## ## Within-Subject Factors Included: Check MANOVA Results The simulations yield closely matching results. 9.2 Examine variation of means and correlation # define the parameters mu = c(700, 670, 690, 750) # true effects (in this case, a double dissociation) sigma = 150 # population standard deviation rho = 0.4 # correlation between repeated measures nsubs = 25 # how many subjects? nsims = nsims # how many simulation replicates? # create 2 factors representing the 2 independent variables cond = data.frame( X1 = rep(factor(letters[1:2]), nsubs * 2), X2 = rep(factor(letters[1:2]), nsubs, each=2)) # create a subjects factor subject = factor(sort(rep(1:nsubs, 4))) # combine above into the design matrix dm = data.frame(subject, cond) Build Sigma: the population variance-covariance matrix # create k x k matrix populated with sigma sigma.mat &lt;- rep(sigma, 4) S &lt;- matrix(sigma.mat, ncol=length(sigma.mat), nrow=length(sigma.mat)) # compute covariance between measures Sigma &lt;- t(S) * S * rho # put the variances on the diagonal diag(Sigma) &lt;- sigma^2 Run the simulation # stack &#39;nsims&#39; individual data frames into one large data frame df = dm[rep(seq_len(nrow(dm)), nsims), ] # add an index column to track the simulation run df$simID = sort(rep(seq_len(nsims), nrow(dm))) # sample the observed data from a multivariate normal distribution # using MASS::mvrnorm with the parameters mu and Sigma created earlier # and bind to the existing df require(MASS) make.y = expression(as.vector(t(mvrnorm(nsubs, mu, Sigma)))) df$y = as.vector(replicate(nsims, eval(make.y))) # use do(), the general purpose complement to the specialized data # manipulation functions available in dplyr, to run the ANOVA on # each section of the grouped data frame created by group_by require(dplyr) require(car) require(broom) mods &lt;- df %&gt;% group_by(simID) %&gt;% do(model = aov(y ~ X1 * X2 + Error(subject / (X1*X2)), qr=FALSE, data = .)) # extract p-values for each effect and store in a data frame p = data.frame( mods %&gt;% do(as.data.frame(tidy(.$model[[3]])$p.value[1])), mods %&gt;% do(as.data.frame(tidy(.$model[[4]])$p.value[1])), mods %&gt;% do(as.data.frame(tidy(.$model[[5]])$p.value[1]))) colnames(p) = c(&#39;X1&#39;,&#39;X2&#39;,&#39;Interaction&#39;) The empirical power is easy to compute, it’s just the proportion of simulation runs where p &lt;. 05. power.res = apply(as.matrix(p), 2, function(x) round(mean(ifelse(x &lt; .05, 1, 0) * 100),2)) power.res ## X1 X2 Interaction ## 11 35 51 Visualize the distributions of p-values # plot the known effects require(ggplot2) require(gridExtra) means = data.frame(cond[1:4, ], mu, SE = sigma / sqrt(nsubs)) plt1 = ggplot(means, aes(y = mu, x = X1, fill=X2)) + geom_bar(position = position_dodge(), stat=&quot;identity&quot;) + geom_errorbar(aes(ymin = mu-SE, ymax = mu+SE), position = position_dodge(width=0.9), size=.6, width=.3) + coord_cartesian(ylim=c((.7*min(mu)), 1.2*max(mu))) + theme_bw() # melt the data into a ggplot friendly &#39;long&#39; format require(reshape2) plotData &lt;- melt(p, value.name = &#39;p&#39;) # plot each of the p-value distributions on a log scale options(scipen = 999) # &#39;turn off&#39; scientific notation plt2 = ggplot(plotData, aes(x = p)) + scale_x_log10(breaks=c(1, 0.05, 0.001), labels=c(1, 0.05, 0.001)) + geom_histogram(colour = &quot;darkblue&quot;, fill = &quot;white&quot;) + geom_vline(xintercept = 0.05, colour=&#39;red&#39;) + facet_grid(variable ~ .) + labs(x = expression(Log[10]~P)) + theme(axis.text.x = element_text(color=&#39;black&#39;, size=7)) # arrange plots side by side and print grid.arrange(plt1, plt2, nrow=1) We can reproduce this simulation: mu = c(700, 670, 690, 750) # true effects (in this case, a double dissociation) sigma = 150 # population standard deviation n &lt;- 25 sd &lt;- 150 r &lt;- 0.4 string = &quot;2w*2w&quot; alpha_level &lt;- 0.05 labelnames = c(&quot;age&quot;, &quot;old&quot;, &quot;young&quot;, &quot;color&quot;, &quot;blue&quot;, &quot;red&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_age 31 0.1112 ## anova_color 14 0.0633 ## anova_age:color 43 0.1526 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_age_old_color_blue_age_old_color_red 13 -0.16555 ## p_age_old_color_blue_age_young_color_blue 4 -0.05281 ## p_age_old_color_blue_age_young_color_red 37 0.32963 ## p_age_old_color_red_age_young_color_blue 14 0.11111 ## p_age_old_color_red_age_young_color_red 63 0.49513 ## p_age_young_color_blue_age_young_color_red 42 0.38630 ## ## Within-Subject Factors Included: Check MANOVA Results "],
["mixed-anova-part-3.html", "Chapter 10 Mixed ANOVA Part 3 10.1 Two by two ANOVA, within design 10.2 Simple example: 2x2 within design", " Chapter 10 Mixed ANOVA Part 3 10.1 Two by two ANOVA, within design Potvin &amp; Schutz (2000) simulate a wide range of repeated measure designs. The give an example of a 3x3 design, with the following correlation matrix: Variances were set to 1 (so all covariance matrices in their simulations were identical). In this specific example, the white fields are related to the correlation for the A main effect (these cells have the same level for B, but different levels of A). The grey cells are related to the main effect of B (the cells have the same level of A, but different levels of B). Finally, the black cells are related to the AxB interaction (they have different levels of A and B). The diagonal (all 1) relate to cells with the same levels of A and B. Potvin &amp; Schulz (2000) examine power for 2x2 within ANOVA designs and develop approximations of the error variance. For a design with 2 within factors (A and B) these are: For the main effect of A: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\overline { \\rho } _ { A } ) + \\sigma ^ { 2 } ( q - 1 ) ( \\overline { \\rho } _ { B } - \\overline { \\rho } _ { AB } )\\) For the main effectof B: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\overline { \\rho } _ { B } ) + \\sigma ^ { 2 } ( p - 1 ) ( \\overline { \\rho } _ { A } - \\overline { \\rho } _ { A B } )\\) For the interaction between A and B: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\rho _ { \\max } ) - \\sigma ^ { 2 } ( \\overline { \\rho } _ { \\min } - \\overline { \\rho } _ { AB } )\\) 10.2 Simple example: 2x2 within design It is difficult to just come up with a positive definite covariance matrix. The best way to achieve this is to get the correlations from a pilot study. Indeed, it should be rather difficult to know which correlations to fill in without some pilot data. We try to get the formulas in Potvin and Schutz (2000) working. Below, I manage for the main effects, but not for the interaction. mu = c(2,1,4,2) n &lt;- 20 sd &lt;- 5 r &lt;- c( 0.8, 0.4, 0.4, 0.4, 0.4, 0.8 ) string = &quot;2w*2w&quot; alpha_level &lt;- 0.05 labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = 1000) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_A 24.4 0.12401 ## anova_B 82.5 0.33318 ## anova_A:B 15.4 0.09217 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_A_a1_B_b1_A_a1_B_b2 26.3 -0.3279045 ## p_A_a1_B_b1_A_a2_B_b1 34.7 0.3868474 ## p_A_a1_B_b1_A_a2_B_b2 5.0 -0.0008138 ## p_A_a1_B_b2_A_a2_B_b1 65.5 0.5811199 ## p_A_a1_B_b2_A_a2_B_b2 11.3 0.1920787 ## p_A_a2_B_b1_A_a2_B_b2 78.3 -0.6703537 ## ## Within-Subject Factors Included: Check MANOVA Results Result simulation after 100000 simulations simulation_result &lt;- ANOVA_power(design_result, alpha = 0.05, nsims = 100000) Power and Effect sizes for ANOVA tests power effect size anova_A 26.849 0.0984 anova_B 64.091 0.2452 anova_A:B 26.875 0.0983 Power and Effect sizes for contrasts power effect size p_A_a1_B_b1_A_a1_B_b2 27.052 -0.3298 p_A_a1_B_b1_A_a2_B_b1 39.637 0.4162 p_A_a1_B_b1_A_a2_B_b2 4.983 -0.0005 p_A_a1_B_b2_A_a2_B_b1 64.252 0.5699 p_A_a1_B_b2_A_a2_B_b2 13.479 0.2077 p_A_a2_B_b1_A_a2_B_b2 76.622 -0.6597 We can try to use the formula in Potvin &amp; Schutz (2000). k &lt;- 1 #one group (because all factors are within) rho_A &lt;- 0.5 #mean r for factor A rho_B &lt;- 0.8 #mean r for factor B rho_AB &lt;- 0.4 #mean r for factor AB alpha &lt;- 0.05 sigma &lt;- sd m_A &lt;- 2 #levels factor A variance_e_A &lt;- sigma^2 * (1 - rho_A) + sigma^2 * (m_A - 1) * (rho_B - rho_AB) #Variance A variance_e_A ## [1] 22.5 m_B &lt;- 2 #levels factor B variance_e_B &lt;- sigma^2 * (1 - rho_B) + sigma^2 * (m_B - 1) * (rho_A - rho_AB) #Variance B variance_e_B ## [1] 7.5 variance_e_AB &lt;- sigma^2 * (1 - max(rho_A, rho_B)) - sigma^2 * (min(rho_A, rho_B) - rho_AB) #Variance AB variance_e_AB ## [1] 2.5 mean_mat &lt;- t(matrix(mu, nrow = m_B,ncol = m_A)) #Create a mean matrix mean_mat ## [,1] [,2] ## [1,] 2 1 ## [2,] 4 2 # Potving &amp; Schutz, 2000, formula 2, p. 348 # For main effect A lambda_A &lt;- n * m_A * sum((rowMeans(mean_mat) - mean(rowMeans(mean_mat))) ^ 2) / variance_e_A lambda_A ## [1] 2 df1 &lt;- (m_A - 1) #calculate degrees of freedom 1 - ignoring the * e sphericity correction df2 &lt;- (n - k) * (m_A - 1) #calculate degrees of freedom 2 F_critical &lt;- qf(alpha, # critical F-vaue df1, df2, lower.tail = FALSE) pow_A &lt;- pf(qf(alpha, #power df1, df2, lower.tail = FALSE), df1, df2, lambda_A, lower.tail = FALSE) lambda_B &lt;- n * m_B * sum((colMeans(mean_mat) - mean(colMeans(mean_mat))) ^ 2) / variance_e_B lambda_B ## [1] 6 df1 &lt;- (m_B - 1) #calculate degrees of freedom 1 df2 &lt;- (n - k) * (m_B - 1) #calculate degrees of freedom 2 F_critical &lt;- qf(alpha, # critical F-vaue df1, df2, lower.tail = FALSE) pow_B &lt;- pf(qf(alpha, #power df1, df2, lower.tail = FALSE), df1, df2, lambda_B, lower.tail = FALSE) pow_A ## [1] 0.2691752 pow_B ## [1] 0.6422587 We see the 26.9 and 64.2 correspond to the results of the simulation quite closely. #This (or the variance calculation above) does not work. lambda_AB &lt;- n * sum(( mean_mat - rowMeans(mean_mat) - colMeans(mean_mat) + mean(mean_mat) ) ^ 2) / variance_e_AB lambda_AB ## [1] 38 df1 &lt;- (m_A - 1)*(m_B - 1) #calculate degrees of freedom 1 df2 &lt;- (n - k) * (m_A - 1) * (m_B - 1) #calculate degrees of freedom 2 F_critical &lt;- qf(alpha, # critical F-vaue df1, df2, lower.tail = FALSE) pow &lt;- pf(qf(alpha, #power df1, df2, lower.tail = FALSE), df1, df2, lambda_AB, lower.tail = FALSE) pow ## [1] 0.9999458 Maybe the simulation is not correct for the interaction, or the formula is not correctly programmed. "],
["error-control-in-exploratory-anova.html", "Chapter 11 Error Control in Exploratory ANOVA", " Chapter 11 Error Control in Exploratory ANOVA In a 2X2X2 design, an ANOVA will give the test results for three main effects, three two-way interactions, and one three-way interaction. That’s 7 statistical tests. The probability of making at least one Type 1 error in a single 2x2x2 ANOVA is 1-(0.95)^7 = 30%. string &lt;- &quot;2b*2b*2b&quot; n &lt;- 50 mu &lt;- c(20, 20, 20, 20, 20, 20, 20, 20) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 5 p_adjust = &quot;none&quot; # &quot;none&quot; means we do not correct for multiple comparisons labelnames &lt;- c(&quot;condition1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;condition2&quot;, &quot;c&quot;, &quot;d&quot;, &quot;condition3&quot;, &quot;e&quot;, &quot;f&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, p_adjust = p_adjust, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition1 2 0.002328 ## anova_condition2 6 0.002351 ## anova_condition3 6 0.002704 ## anova_condition1:condition2 1 0.002053 ## anova_condition1:condition3 6 0.002656 ## anova_condition2:condition3 7 0.002552 ## anova_condition1:condition2:condition3 8 0.002856 ## ## Power and Effect sizes for contrasts ## power ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_c_condition3_f 5 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_e 2 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_f 4 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_e 6 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 5 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 9 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 6 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_e 3 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_f 8 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_e 2 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_f 5 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 7 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 6 ## p_condition1_a_condition2_d_condition3_e_condition1_a_condition2_d_condition3_f 7 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_e 1 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_f 5 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_e 5 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f 3 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_e 7 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_f 7 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_e 7 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_f 5 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 7 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 7 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 3 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 5 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 4 ## p_condition1_b_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f 3 ## effect_size ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_c_condition3_f -0.0274899 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_e 0.0267475 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_f 0.0055897 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_e 0.0132975 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0.0122938 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0.0197361 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 0.0195135 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_e 0.0552358 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_f 0.0316891 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_e 0.0401208 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_f 0.0386798 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 0.0488620 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 0.0494792 ## p_condition1_a_condition2_d_condition3_e_condition1_a_condition2_d_condition3_f -0.0238790 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_e -0.0154989 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_f -0.0168565 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_e -0.0071455 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f -0.0083037 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_e 0.0084359 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_f 0.0068890 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_e 0.0167493 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_f 0.0171173 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0.0001106 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0.0084590 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 0.0093166 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 0.0100318 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 0.0105649 ## p_condition1_b_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f -0.0005965 When there is no true effect, we formally do not have ‘power’ (which is defined as the probability of finding p &lt; \\(\\alpha\\) if there is a true effect to be found) so the power column should be read as the ‘Type 1 error rate’. Because we have saved the power simulation in the ‘power_result’ object, we can perform calculations on the ‘sim_data’ dataframe that is stored. This dataframe contains the results for the nsims simulations (e.g., 10000 rows if you ran 10000 simulations) and stores the p-values and effect size estimates for each ANOVA. The first 7 columns are the p-values for the ANOVA, first the main effects of condition 1, 2, and 3, then three two-way interactions, and finally the threeway interaction. We can calculate the number of significant results for each test (which should be 5%) by counting the number of significant p-values in each of the 7 rows: apply(as.matrix(power_result$sim_data[(1:7)]), 2, function(x) round(mean(ifelse(x &lt; alpha_level, 1, 0) * 100),4)) ## anova_condition1 ## 2 ## anova_condition2 ## 6 ## anova_condition3 ## 6 ## anova_condition1:condition2 ## 1 ## anova_condition1:condition3 ## 6 ## anova_condition2:condition3 ## 7 ## anova_condition1:condition2:condition3 ## 8 This is the Type 1 error rate for each test. When we talk about error rate inflation due to multiple comparisons, we are talking about the probability that you conclude there is an effect, when there is actually no effect, when there is a significant effect for the main effect of condition 1, or condition 2, or condition 3, or for the two-way interaction between condition 1 and 2, or condition 1 and 3, or condition 2 and 3, or in the threeway interaction. To calculate this error rate we do not just add the 7 error rates (so 7 * 5% - 35%). Instead, we calculate the probability that there will be at least one significant result in an ANOVA we perform. Some ANOVA results will have multiple significant results, just due to the Type 1 error rate (e.g., a significant result for the threeway interaction, and for the main effect of condition 1) but such an ANOVA is counted only once. Iwe calculate this percentage from our simulations, we see the number is indeed very close to 1-(0.95)^7 = 30%. sum(apply(as.matrix(power_result$sim_data[(1:7)]), 1, function(x) round(mean(ifelse(x &lt; alpha_level, 1, 0) * 100),4)) &gt; 0)/nsims*100 ## [1] 34 The question is what we should do about this alpha inflation. It is undesirable if you perform exploratory ANOVA’s and are fooled too often by Type 1 errors, which will not replicate if you try to build on them. Therefore, you need to control the Type 1 error rate. In the simulation code, which relies on the afex package, there is the option to set p_adjust. In the simulation above, p_adjust was set to “none”. This means no adjustment is mage to which p-values are considered to be significant, and the alpha level is used as it is set in the simulation (above this was 0.05). Afex relies on the p.adjust functon in the stats package in R (more information is available here). From the package details: The adjustment methods include the Bonferroni correction (“bonferroni”) in which the p-values are multiplied by the number of comparisons. Less conservative corrections are also included by Holm (1979) (“holm”), Hochberg (1988) (“hochberg”), Hommel (1988) (“hommel”), Benjamini &amp; Hochberg (1995) (“BH” or its alias “fdr”), and Benjamini &amp; Yekutieli (2001) (“BY”), respectively. A pass-through option (“none”) is also included. The first four methods are designed to give strong control of the family-wise error rate. There seems no reason to use the unmodified Bonferroni correction because it is dominated by Holm’s method, which is also valid under arbitrary assumptions. Hochberg’s and Hommel’s methods are valid when the hypothesis tests are independent or when they are non-negatively associated (Sarkar, 1998; Sarkar and Chang, 1997). Hommel’s method is more powerful than Hochberg’s, but the difference is usually small and the Hochberg p-values are faster to compute. The “BH” (aka “fdr”) and “BY” method of Benjamini, Hochberg, and Yekutieli control the false discovery rate, the expected proportion of false discoveries amongst the rejected hypotheses. The false discovery rate is a less stringent condition than the family-wise error rate, so these methods are more powerful than the others. Let’s re-run the simulation twith the Holm-Bonferroni correction, which is simple and require no assumptions. string &lt;- &quot;2b*2b*2b&quot; n &lt;- 50 mu &lt;- c(20, 20, 20, 20, 20, 20, 20, 20) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 5 p_adjust = &quot;holm&quot; # Changed to Holm-Bonferroni labelnames &lt;- c(&quot;condition1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;condition2&quot;, &quot;c&quot;, &quot;d&quot;, &quot;condition3&quot;, &quot;e&quot;, &quot;f&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, p_adjust = p_adjust, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_condition1 0 0.002667 ## anova_condition2 1 0.002505 ## anova_condition3 0 0.002728 ## anova_condition1:condition2 2 0.002525 ## anova_condition1:condition3 1 0.001754 ## anova_condition2:condition3 1 0.002809 ## anova_condition1:condition2:condition3 0 0.002426 ## ## Power and Effect sizes for contrasts ## power ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_c_condition3_f 1 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_e 0 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_f 0 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_e 0 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 0 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_e 0 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_f 0 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_e 0 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_f 0 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 1 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 0 ## p_condition1_a_condition2_d_condition3_e_condition1_a_condition2_d_condition3_f 0 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_e 0 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_f 0 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_e 0 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f 0 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_e 0 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_f 0 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_e 0 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_f 1 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 1 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e 0 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f 0 ## p_condition1_b_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f 0 ## effect_size ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_c_condition3_f 0.0319656 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_e -0.0019998 ## p_condition1_a_condition2_c_condition3_e_condition1_a_condition2_d_condition3_f 0.0291337 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_e -0.0102247 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0.0249407 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0.0012879 ## p_condition1_a_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f -0.0050040 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_e -0.0332806 ## p_condition1_a_condition2_c_condition3_f_condition1_a_condition2_d_condition3_f 0.0007697 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_e -0.0436373 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_c_condition3_f -0.0071652 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e -0.0293800 ## p_condition1_a_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f -0.0375714 ## p_condition1_a_condition2_d_condition3_e_condition1_a_condition2_d_condition3_f 0.0340495 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_e -0.0104663 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_c_condition3_f 0.0280520 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_e 0.0026967 ## p_condition1_a_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f -0.0044352 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_e -0.0431155 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_c_condition3_f -0.0048866 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_e -0.0296965 ## p_condition1_a_condition2_d_condition3_f_condition1_b_condition2_d_condition3_f -0.0369559 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_c_condition3_f 0.0408374 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_e 0.0147371 ## p_condition1_b_condition2_c_condition3_e_condition1_b_condition2_d_condition3_f 0.0074189 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_e -0.0212855 ## p_condition1_b_condition2_c_condition3_f_condition1_b_condition2_d_condition3_f -0.0310634 ## p_condition1_b_condition2_d_condition3_e_condition1_b_condition2_d_condition3_f -0.0098486 If we now calculate the overall Type 1 error rate: sum(apply(as.matrix(power_result$sim_data[(1:7)]), 1, function(x) round(mean(ifelse(x &lt; alpha_level, 1, 0) * 100),4)) &gt; 0)/nsims*100 ## [1] 5 We see it is close to 5%. Note that error rates have variation, and even in a few thousand simulations, the error rate in the sample of studies can easily be half a percentage point higher or lower. But in the long run the error rate should equal the alpha level. Furthermore, note that the Holm-bonferroni method is slightly more powerful than the Bonferroni procedure (which is simply \\(\\alpha\\) divided by the numner of tests). There are more powerful procedures to control the Type 1 error rate, which require more assumptions. For a small number of tests, they Holm-Bonferroni procedure works well. Alternative procedure to control error rates can be found in the multcomp R package. "],
["power-in-interactions.html", "Chapter 12 Power in Interactions", " Chapter 12 Power in Interactions In the 17th Data Colada blog post titled No-way Interactions Uri Simonsohn discusses how a moderated interaction (the effect is there in one condition, but disappears in another condition) requires at least twice as many subjects per cell as a study that simply aims to show the simple effect. For example, see the plot below. Assume the score on the vertical axis is desire for fruit, as a function of the fruit that is available (an apple or a banana) and how hungry people are (not, or very). We see there is a difference between the participants desire for a banana compared to an apple, but only for participants who are very hungry. The point that is made is that you need twice as many participants in each cell to have power for the interaction, as you need for the simple effect. string &lt;- &quot;2b*2b&quot; n &lt;- 20 mu &lt;- c(20, 20, 20, 25) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 0.5 labelnames &lt;- c(&quot;fruit&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;hunger&quot;, &quot;no hunger&quot;, &quot;very hungry&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) We can reproduce the simulations in the Data Colada blog post, using the original code. #R-Code # #Written by Uri Simonsohn, March 2014 # # #In DataColada[17] I propose that 2x2 interaction studies need 2x the sample size #http://datacolada.org/2014/03/10/17-no-way-interactions #In a companion ,pdf I show the simple math behind it # # #Simulations are often more persuasive than math, so here it goes. #I run simulations that compute power for 2 and 4 cell design, the latter testing the interaction ################################################################################################### #Create function that computes power of Studies 1 and 2, where Study 1 has 2 cells and tests a simple effect #and Study 2 has 4 cells and tests the interaction colada17=function(d1,d2,n1,n2,simtot) { #n1: sample size, per cell, study 1 #n2: sample size, per cell, study 2 #d1: simple effect M1-M2 #d2: moderated effect M3-M4, full elimination of effect implies d2=0 #simtot: how many simulations to run #Here we will store results p1=c() #p-values for Study 1 p2=c() #p-values for Study 2 for(i in 1:simtot) { #draw data 4 samples y1=rnorm(n=max(n1,n2),mean=d1) y2=rnorm(n=max(n1,n2)) y3=rnorm(n=max(n1,n2),mean=d2) y4=rnorm(n=max(n1,n2)) #GET DATA READY FOR ANOVA y=c(y1,y2,y3,y4) #the d.v. nrep=rep(n2,4) A=rep(c(1,1,0,0),times=nrep) B=rep(c(1,0,1,0),times=nrep) #STUDY 1 p1.k=t.test(y1[1:n1],y2[1:n1],var.equal=TRUE)$p.value #Do a t-test on the first n1 observations #STUDY 2 p2.k=anova(lm(y ~ A * B))[&quot;A:B&quot;, &quot;Pr(&gt;F)&quot;] #Do anova, keep p-value of the interaction #Store the results p1=c(p1,p1.k) p2=c(p2,p2.k) } #What share off comparisons are significant power1=sum(p1&lt;=.05)/simtot #Simple test using estimate of variance from 2 cells only power2=sum(p2&lt;=.05)/simtot #Interaction cat(&quot;\\nStudy 1 is powered to:&quot;,round(power1,2)) cat(&quot;\\nStudy 2 is powered to:&quot;,round(power2,2)) } #Same power for 2n regardless of n and d colada17(simtot=2000, n1=20,n2=40,d1=1,d2=0) ## ## Study 1 is powered to: 0.86 ## Study 2 is powered to: 0.88 colada17(simtot=2000, n1=50,n2=100,d1=.3,d2=0) ## ## Study 1 is powered to: 0.33 ## Study 2 is powered to: 0.32 colada17(simtot=2000, n1=150,n2=300,d1=.25,d2=0) ## ## Study 1 is powered to: 0.57 ## Study 2 is powered to: 0.59 #Need 4n if effect is 70% attenuated colada17(simtot=2000, n1=25,n2=100,d1=.5, d2=.3*.5) ## ## Study 1 is powered to: 0.41 ## Study 2 is powered to: 0.4 colada17(simtot=2000, n1=50,n2=200,d1=.5, d2=.3*.5) ## ## Study 1 is powered to: 0.69 ## Study 2 is powered to: 0.69 colada17(simtot=2000, n1=22,n2=88,d1=.41, d2=.3*.41) ## ## Study 1 is powered to: 0.27 ## Study 2 is powered to: 0.26 #underpowered if run with the same n colada17(simtot=nsims, n1=20,n2=20,d1=1,d2=0) ## ## Study 1 is powered to: 0.81 ## Study 2 is powered to: 0.54 And we can reproduce the results using the ANOVA_power function. alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_fruit 100 0.8660 ## anova_hunger 100 0.8666 ## anova_fruit:hunger 100 0.8673 ## ## Power and Effect sizes for contrasts ## power ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 10 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 5 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 100 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger 5 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 100 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 100 ## effect_size ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry -0.00435 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger -0.02138 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 10.14146 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger -0.02369 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 10.17142 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 10.24218 We see we get the same power for the anova_fruit:hunger interaction and for the simple effect p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry as the simulations by Uri Simonsohn in his blog post. #Same power for 2n regardless of n and d colada17(simtot = 10000, n1 = 20, n2 = 40, d1 = 1, d2 = 0) ## ## Study 1 is powered to: 0.87 ## Study 2 is powered to: 0.88 colada17(simtot = 10000, n1 = 50, n2 = 100, d1 = .3, d2 = 0) ## ## Study 1 is powered to: 0.31 ## Study 2 is powered to: 0.32 colada17(simtot = 10000, n1 = 150, n2 = 300, d1 = .25, d2 = 0) ## ## Study 1 is powered to: 0.57 ## Study 2 is powered to: 0.58 We can also reproduce the last example by adjusting the means and standard deviation. With 150 people, and a Cohen’s d of 0.25 (the difference is 5, the sd 20, so 5/20 = 0.25) we should reproduce the power for the simple effect. string &lt;- &quot;2b*2b&quot; n &lt;- 150 mu &lt;- c(20, 20, 20, 25) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 20 labelnames &lt;- c(&quot;fruit&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;hunger&quot;, &quot;no hunger&quot;, &quot;very hungry&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_fruit 30 0.005263 ## anova_hunger 35 0.006338 ## anova_fruit:hunger 34 0.005374 ## ## Power and Effect sizes for contrasts ## power ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 6 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 5 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 57 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger 8 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 58 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 52 ## effect_size ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 0.006007 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 0.001199 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 0.255507 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger -0.005531 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 0.246629 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 0.252829 And changing the sample size to 300 should reproduce the power for the interaction in the ANOVA. string &lt;- &quot;2b*2b&quot; n &lt;- 300 mu &lt;- c(20, 20, 20, 25) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 20 labelnames &lt;- c(&quot;fruit&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;hunger&quot;, &quot;no hunger&quot;, &quot;very hungry&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_fruit 56 0.004770 ## anova_hunger 62 0.004790 ## anova_fruit:hunger 57 0.004524 ## ## Power and Effect sizes for contrasts ## power ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 4 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 6 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 86 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger 9 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 79 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 82 ## effect_size ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 0.0064737 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 0.0072539 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 0.2499401 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger 0.0002013 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 0.2423586 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 0.2434024 Now if we look at the power analysis table for the last simulation, we see that the power for the ANOVA is the same for the main effect of fruit, the main effect of hunger, and the main effect of the interaction. All the effect sizes are equal as well. We can understand why if we look at the means in a 2x2 table: mean_mat &lt;- t(matrix(mu, nrow = 2, ncol = 2)) #Create a mean matrix rownames(mean_mat) &lt;- c(&quot;apple&quot;, &quot;banana&quot;) colnames(mean_mat) &lt;- c(&quot;no hunger&quot;, &quot;very hungry&quot;) mean_mat ## no hunger very hungry ## apple 20 20 ## banana 20 25 The first main effect tests the marginal means if we sum over rows, 22.5 vs 20. rowMeans(mean_mat) ## apple banana ## 20.0 22.5 The second main effect tests the marginal means over the rows, which is also 22.5 vs 20. colMeans(mean_mat) ## no hunger very hungry ## 20.0 22.5 The interaction tests whether the average effect of hunger on liking fruit differs in the presence of bananas. In the presence of bananas the effect of hunger on the desireability of fruit is 5 scalepoints. The average effect (that we get from the marginal means) of hunger on fruit desireability is 2.5 (22.5-20). In other words, the interaction tests whether the difference effect between hunger and no hunger is different in the presence of an apple versus in the presence of a banana. Mathematically the interaction effect is computed as the difference between a cell mean and the grand mean, the marginal mean in row i and the grand mean, and the marginal mean in column j and grand mean. For example, for the very hungry-banana condition this is 25 (the value in the cell) - (21.25 [the grand mean] + 1.25 [the marginal mean in row 2, 22.5, minus the grand mean of 21.25] + 1.25 [the marginal mean in column 2, 22.5, minus the grand mean of 21.25]). 25 - (21.25 + (22.5-21.25) + (22.5-21.25)) = 1.25. We can repeat this for every cell, and get for no hunger-apple: 20 - (21.25 + (20-21.25) + (20-21.25)) = 1.25, for very hungry apple: 20 - (21.25 + (22.5-21.25) + (20-21.25)) = 1.25, and no hunger-banana: 20 - (21.25 + (20-21.25) + (22.5-21.25)) = 1.25. These values are used to calculate the sum of squares. a1 &lt;- mean_mat[1,1] - (mean(mean_mat) + (mean(mean_mat[1,]) - mean(mean_mat)) + (mean(mean_mat[,1]) - mean(mean_mat))) a2 &lt;- mean_mat[1,2] - (mean(mean_mat) + (mean(mean_mat[1,]) - mean(mean_mat)) + (mean(mean_mat[,2]) - mean(mean_mat))) b1 &lt;- mean_mat[2,1] - (mean(mean_mat) + (mean(mean_mat[2,]) - mean(mean_mat)) + (mean(mean_mat[,1]) - mean(mean_mat))) b2 &lt;- mean_mat[2,2] - (mean(mean_mat) + (mean(mean_mat[2,]) - mean(mean_mat)) + (mean(mean_mat[,2]) - mean(mean_mat))) SS_ab &lt;- n * sum(c(a1, a2, b1, b2)^2) The sum of squares is dependent on the sample size, as can be seen in the code above. The larger the sample size, the larger the sum of squares, and therefore (all else equal) the larger the F-statistic, and the smaller the p-value. We see from the simulations that all three tests have the same effect size, and therefore the same power. Interactions can have more power than main effects if the effect size of the interaction is larger than the effect size of the main effects. An example of this is a cross-over interaction. For example, let’s take a 2x2 matrix of means with a crossover interaction: mu &lt;- c(25, 20, 20, 25) mean_mat &lt;- t(matrix(mu, nrow = 2, ncol = 2)) #Create a mean matrix rownames(mean_mat) &lt;- c(&quot;apple&quot;, &quot;banana&quot;) colnames(mean_mat) &lt;- c(&quot;no hunger&quot;, &quot;very hungry&quot;) mean_mat ## no hunger very hungry ## apple 25 20 ## banana 20 25 Neither of the main effects is now significant, as the marginal means are 22.5 vs 22.5 for both main effects. The interaction is much stronger, however. We are testing whether the average effect of hunger on the desireability of fruit is different in the presence of bananas. Since the average effect is 0, and the effect of hunger on the desireability of bananas is 5, so the effect size is now twice as large. string &lt;- &quot;2b*2b&quot; n &lt;- 300 mu &lt;- c(25, 20, 20, 25) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 20 labelnames &lt;- c(&quot;fruit&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;hunger&quot;, &quot;no hunger&quot;, &quot;very hungry&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) alpha_level &lt;- 0.05 #We set the alpha level at 0.05. power_result &lt;- ANOVA_power(design_result, alpha_level = alpha_level, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_fruit 5 0.0008308 ## anova_hunger 3 0.0006507 ## anova_fruit:hunger 98 0.0152097 ## ## Power and Effect sizes for contrasts ## power ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry 84 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger 85 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry 2 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger 5 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 84 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 88 ## effect_size ## p_fruit_apple_hunger_no hunger_fruit_apple_hunger_very hungry -0.239992 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_no hunger -0.245240 ## p_fruit_apple_hunger_no hunger_fruit_banana_hunger_very hungry -0.002044 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_no hunger -0.005183 ## p_fruit_apple_hunger_very hungry_fruit_banana_hunger_very hungry 0.239246 ## p_fruit_banana_hunger_no hunger_fruit_banana_hunger_very hungry 0.244578 We can also reproduce the power analysis using the anlytic function: power_analytic &lt;- power_twoway_between(design_result) power_analytic$power_A ## [1] 0.05 power_analytic$power_B ## [1] 0.05 "],
["analytic-power-functions.html", "Chapter 13 Analytic Power Functions 13.1 One-Way Between Subject ANOVA 13.2 Two-way Between Subject Interaction 13.3 3x3 Between Subject ANOVA 13.4 Two by two ANOVA, within design", " Chapter 13 Analytic Power Functions For some designs it is possible to calculate power analytically, using closed functions. 13.1 One-Way Between Subject ANOVA string &lt;- &quot;4b&quot; n &lt;- 60 mu &lt;- c(80, 82, 82, 86) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 10 labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) power_result &lt;- ANOVA_power(design_result, alpha_level = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Factor_A 79 0.05347 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Factor_A_a1_Factor_A_a2 15 0.19128 ## p_Factor_A_a1_Factor_A_a3 19 0.21841 ## p_Factor_A_a1_Factor_A_a4 90 0.59200 ## p_Factor_A_a2_Factor_A_a3 1 0.02548 ## p_Factor_A_a2_Factor_A_a4 59 0.39752 ## p_Factor_A_a3_Factor_A_a4 52 0.37029 We can also calculate power analytically with our own function. power_oneway_between(design_result)$power #using default alpha level of .05 ## [1] 0.8121291 This is a generalized function for One-Way ANOVA’s for any number of groups. It is in part based on code provided with the excellent book by Aberson (2019) Applied Power Analysis for the Behavioral Sciences (but Aberson’s code allows for different n per condition, and different sd per condition). anova1f_4(m1 = 80, m2 = 82, m3 = 82, m4 = 86, s1 = 10, s2 = 10, s3 = 10, s4 = 10, n1 = 60, n2 = 60, n3 = 60, n4 = 60, alpha = .05) We can also use the function in the pwr package. Note that we need to calculate f to use this function, which is based on the means and sd, as illustrated in the formulas above. pwr.anova.test(n = 60, k = 4, f = 0.2179449, sig.level = 0.05) ## ## Balanced one-way analysis of variance power calculation ## ## k = 4 ## n = 60 ## f = 0.2179449 ## sig.level = 0.05 ## power = 0.8121289 ## ## NOTE: n is number in each group Finally, G*Power provides the option to calculate f from the means, sd and n for the cells. It can then be used to calculate power. 13.2 Two-way Between Subject Interaction string &lt;- &quot;2b*2b&quot; n &lt;- 20 mu &lt;- c(20, 20, 20, 25) # Enter means in the order that matches the labels below. sd &lt;- 5 labelnames &lt;- c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) power_result &lt;- ANOVA_power(design_result, alpha_level = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_A 62 0.07572 ## anova_B 73 0.07645 ## anova_A:B 59 0.07294 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_A_a1_B_b1_A_a1_B_b2 4 0.04042 ## p_A_a1_B_b1_A_a2_B_b1 4 0.01930 ## p_A_a1_B_b1_A_a2_B_b2 93 1.06382 ## p_A_a1_B_b2_A_a2_B_b1 2 -0.01633 ## p_A_a1_B_b2_A_a2_B_b2 85 1.03798 ## p_A_a2_B_b1_A_a2_B_b2 87 1.05276 power_res &lt;- power_twoway_between(design_result) #using default alpha level of .05 power_res$power_A ## [1] 0.5978655 power_res$power_B ## [1] 0.5978655 power_res$power_AB ## [1] 0.5978655 We can use the function by Aberson, 2019, as well. anova2x2(m1.1=20, m1.2=20, m2.1=20, m2.2=25, s1.1=5, s1.2=5, s2.1=5, s2.2=5, n1.1=20, n1.2=20, n2.1=20, n2.2=20, alpha=.05, all=&quot;OFF&quot;) 13.3 3x3 Between Subject ANOVA string &lt;- &quot;3b*3b&quot; n &lt;- 20 mu &lt;- c(20, 20, 20, 20, 20, 20, 20, 20, 25) #All means are equal - so there is no real difference. # Enter means in the order that matches the labels below. sd &lt;- 5 labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;Factor_B&quot;, &quot;b1&quot;, &quot;b2&quot;, &quot;b3&quot;) # # the label names should be in the order of the means specified above. design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) power_result &lt;- ANOVA_power(design_result, alpha_level = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Factor_A 56 0.03807 ## anova_Factor_B 43 0.03402 ## anova_Factor_A:Factor_B 65 0.07314 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Factor_A_a1_Factor_B_b1_Factor_A_a1_Factor_B_b2 2 -0.0560230 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a1_Factor_B_b3 8 -0.1019807 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a2_Factor_B_b1 4 -0.0474331 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a2_Factor_B_b2 7 -0.0452973 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a2_Factor_B_b3 6 -0.0317601 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a3_Factor_B_b1 6 -0.0277246 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a3_Factor_B_b2 5 -0.0483986 ## p_Factor_A_a1_Factor_B_b1_Factor_A_a3_Factor_B_b3 80 0.9963312 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a1_Factor_B_b3 5 -0.0428073 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a2_Factor_B_b1 1 0.0081967 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a2_Factor_B_b2 4 0.0046212 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a2_Factor_B_b3 3 0.0329710 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a3_Factor_B_b1 2 0.0350862 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a3_Factor_B_b2 3 0.0134022 ## p_Factor_A_a1_Factor_B_b2_Factor_A_a3_Factor_B_b3 86 1.0343582 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a2_Factor_B_b1 5 0.0512282 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a2_Factor_B_b2 6 0.0557910 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a2_Factor_B_b3 4 0.0759625 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a3_Factor_B_b1 3 0.0730717 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a3_Factor_B_b2 4 0.0587604 ## p_Factor_A_a1_Factor_B_b3_Factor_A_a3_Factor_B_b3 91 1.0851454 ## p_Factor_A_a2_Factor_B_b1_Factor_A_a2_Factor_B_b2 5 -0.0026748 ## p_Factor_A_a2_Factor_B_b1_Factor_A_a2_Factor_B_b3 6 0.0192569 ## p_Factor_A_a2_Factor_B_b1_Factor_A_a3_Factor_B_b1 6 0.0222642 ## p_Factor_A_a2_Factor_B_b1_Factor_A_a3_Factor_B_b2 3 0.0070405 ## p_Factor_A_a2_Factor_B_b1_Factor_A_a3_Factor_B_b3 88 1.0343279 ## p_Factor_A_a2_Factor_B_b2_Factor_A_a2_Factor_B_b3 5 0.0162632 ## p_Factor_A_a2_Factor_B_b2_Factor_A_a3_Factor_B_b1 5 0.0204943 ## p_Factor_A_a2_Factor_B_b2_Factor_A_a3_Factor_B_b2 8 0.0009307 ## p_Factor_A_a2_Factor_B_b2_Factor_A_a3_Factor_B_b3 92 1.0518642 ## p_Factor_A_a2_Factor_B_b3_Factor_A_a3_Factor_B_b1 9 0.0076608 ## p_Factor_A_a2_Factor_B_b3_Factor_A_a3_Factor_B_b2 5 -0.0167979 ## p_Factor_A_a2_Factor_B_b3_Factor_A_a3_Factor_B_b3 87 1.0379169 ## p_Factor_A_a3_Factor_B_b1_Factor_A_a3_Factor_B_b2 6 -0.0191963 ## p_Factor_A_a3_Factor_B_b1_Factor_A_a3_Factor_B_b3 82 1.0181085 ## p_Factor_A_a3_Factor_B_b2_Factor_A_a3_Factor_B_b3 88 1.0400290 power_res &lt;- power_twoway_between(design_result) #using default alpha level of .05 power_res$power_A ## [1] 0.4486306 power_res$power_B ## [1] 0.4486306 power_res$power_AB ## [1] 0.6434127 13.4 Two by two ANOVA, within design Potvin &amp; Schutz (2000) simulate a wide range of repeated measure designs. The give an example of a 3x3 design, with the following correlation matrix: Variances were set to 1 (so all covariance matrices in their simulations were identical). In this specific example, the white fields are related to the correlation for the A main effect (these cells have the same level for B, but different levels of A). The grey cells are related to the main effect of B (the cells have the same level of A, but different levels of B). Finally, the black cells are related to the AxB interaction (they have different levels of A and B). The diagonal (all 1) relate to cells with the same levels of A and B. Potvin &amp; Schulz (2000) examine power for 2x2 within ANOVA designs and develop approximations of the error variance. For a design with 2 within factors (A and B) these are: For the main effect of A: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\overline { \\rho } _ { A } ) + \\sigma ^ { 2 } ( q - 1 ) ( \\overline { \\rho } _ { B } - \\overline { \\rho } _ { AB } )\\) For the main effectof B: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\overline { \\rho } _ { B } ) + \\sigma ^ { 2 } ( p - 1 ) ( \\overline { \\rho } _ { A } - \\overline { \\rho } _ { A B } )\\) For the interaction between A and B: \\(\\sigma _ { e } ^ { 2 } = \\sigma ^ { 2 } ( 1 - \\rho _ { \\max } ) - \\sigma ^ { 2 } ( \\overline { \\rho } _ { \\min } - \\overline { \\rho } _ { AB } )\\) We first simulate a within subjects 2x2 ANOVA design. mu = c(2,1,4,2) n &lt;- 20 sd &lt;- 5 r &lt;- c( 0.8, 0.5, 0.4, 0.4, 0.5, 0.8 ) string = &quot;2w*2w&quot; labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) simulation_result &lt;- ANOVA_power(design_result, alpha_level = 0.05, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_A 33 0.1442 ## anova_B 68 0.2765 ## anova_A:B 27 0.1323 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_A_a1_B_b1_A_a1_B_b2 33 -0.361010 ## p_A_a1_B_b1_A_a2_B_b1 46 0.445447 ## p_A_a1_B_b1_A_a2_B_b2 8 -0.007975 ## p_A_a1_B_b2_A_a2_B_b1 65 0.624395 ## p_A_a1_B_b2_A_a2_B_b2 19 0.225525 ## p_A_a2_B_b1_A_a2_B_b2 77 -0.700134 ## ## Within-Subject Factors Included: Check MANOVA Results We can use the ANOVA_exact function to evaluate this design. power_res &lt;- ANOVA_exact(design_result = design_result) ## Power and Effect sizes for ANOVA tests ## power partial_eta_squared cohen_f non_centrality ## A 26.92 0.0952 0.3244 2 ## B 64.23 0.2400 0.5620 6 ## A:B 26.92 0.0952 0.3244 2 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_A_a1_B_b1_A_a1_B_b2 26.92 -0.3162 ## p_A_a1_B_b1_A_a2_B_b1 39.70 0.4000 ## p_A_a1_B_b1_A_a2_B_b2 5.00 0.0000 ## p_A_a1_B_b2_A_a2_B_b1 64.23 0.5477 ## p_A_a1_B_b2_A_a2_B_b2 13.60 0.2000 ## p_A_a2_B_b1_A_a2_B_b2 76.52 -0.6325 power_res$power_A ## NULL power_res$power_B ## NULL power_res$power_AB ## NULL We can use the code by Abelson (2019) to produce the same results. win2F(m1.1=2, m2.1=1, m1.2=4, m2.2=2, s1.1=5, s2.1=5, s1.2=5, s2.2=5, r12=0.8, r13=0.5, r14=0.4, r23=0.4, r24=0.5, r34=0.8, n=20) "],
["power-curves.html", "Chapter 14 Power curves", " Chapter 14 Power curves Power is calculated for a specific value of an effect size, alpha level, and sample size. Because you often do not know the true effect size, it often makes more sense to think of the power curve as a function of the size of the effect. Although power curves can be calculated based on simulations for any design, we will use the analytic solution to calculate the power of ANOVA designs because these calculations are much faster. The basic approach is to calculate power for a specific pattern of means, a specific effect size, a given alpha level, and a specific pattern of correlations. This is one example: #2x2 design string = &quot;2w*2w&quot; mu = c(0,0,0,0.5) n &lt;- 20 sd &lt;- 1 r &lt;- 0.5 labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_res &lt;- ANOVA_exact(design_result) ## Power and Effect sizes for ANOVA tests ## power partial_eta_squared cohen_f non_centrality ## A 32.36 0.1163 0.3627 2.5 ## B 32.36 0.1163 0.3627 2.5 ## A:B 32.36 0.1163 0.3627 2.5 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_A_a1_B_b1_A_a1_B_b2 5.00 0.0 ## p_A_a1_B_b1_A_a2_B_b1 5.00 0.0 ## p_A_a1_B_b1_A_a2_B_b2 56.45 0.5 ## p_A_a1_B_b2_A_a2_B_b1 5.00 0.0 ## p_A_a1_B_b2_A_a2_B_b2 56.45 0.5 ## p_A_a2_B_b1_A_a2_B_b2 56.45 0.5 power_res$main_results ## power partial_eta_squared cohen_f non_centrality ## A 32.36 0.1163 0.3627 2.5 ## B 32.36 0.1163 0.3627 2.5 ## A:B 32.36 0.1163 0.3627 2.5 We can make these calculations for a range of sample sizes, to get a power curve. We created a simple function that performs these calculations across a range of sample sizes (from n = 2 to max_, a variable you can specify in the function). p_a &lt;- plot_power(design_result, max_n = 50) "],
["explore-increase-in-effect-size-for-moderated-interactions-.html", "Chapter 15 Explore increase in effect size for moderated interactions. 15.1 Explore increase in effect size for cross-over interactions. 15.2 Explore increase in correlation in moderated interactions. 15.3 Increasing correlation in on factor decreases power in second factor", " Chapter 15 Explore increase in effect size for moderated interactions. The design has means 0, 0, 0, 0, with one cell increasing by 0.1, up to 0, 0, 0, 0.5. The standard deviation is set to 1. The correlation between all variables is 0.5. string &lt;- &quot;2w*2w&quot; labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.0), sd = 1, r = 0.5, labelnames = labelnames) p_a &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.1), sd = 1, r = 0.5, labelnames = labelnames) p_b &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.2), sd = 1, r = 0.5, labelnames = labelnames) p_c &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.5, labelnames = labelnames) p_d &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.4), sd = 1, r = 0.5, labelnames = labelnames) p_e &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.5), sd = 1, r = 0.5, labelnames = labelnames) p_f &lt;- plot_power(design_result, max_n = 100) # Create long format dataframe #zzz &lt;- rbind(p_a$power_df, p_b$power_df, p_c$power_df, p_d$power_df, p_e$power_df, p_f$power_df) #zzz &lt;- cbind(zzz,seq(1,length(zzz$design))) #colnames(zzz)[1] &lt;- &quot;design&quot; #colnames(zzz)[6] &lt;- &quot;ID&quot; #zzz &lt;- melt(zzz, id.vars = c(&quot;ID&quot;, &quot;design&quot;, &quot;n_vec&quot;), measure.vars = c(&quot;power_A&quot;, &quot;power_B&quot;, &quot;power_AB&quot;)) # Plot data using facets, split by factors and interaction, and design #ggplot(data=zzz, aes(x = n_vec, y = value)) + # geom_line( size=1.5) + # scale_x_continuous(limits = c(0, max(zzz$n_vec))) + # scale_y_continuous(limits = c(0, 100)) + # theme_bw() + # labs(x=&quot;Sample size&quot;, y = &quot;Power&quot;) + # facet_grid(design~variable) 15.1 Explore increase in effect size for cross-over interactions. The design has means 0, 0, 0, 0, with two cells increasing by 0.1, up to 0.5, 0, 0, 0.5. The standard deviation is set to 1. The correlation between all variables is 0.5. design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.0), sd = 1, r = 0.5, labelnames = labelnames) p_a &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0.1,0,0,0.1), sd = 1, r = 0.5, labelnames = labelnames) p_b &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0.2,0,0,0.2), sd = 1, r = 0.5, labelnames = labelnames) p_c &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0.3,0,0,0.3), sd = 1, r = 0.5, labelnames = labelnames) p_d &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0.4,0,0,0.4), sd = 1, r = 0.5, labelnames = labelnames) p_e &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0.5,0,0,0.5), sd = 1, r = 0.5, labelnames = labelnames) p_f &lt;- plot_power(design_result, max_n = 100) 15.2 Explore increase in correlation in moderated interactions. The design has means 0, 0, 0, 0.3. The standard deviation is set to 1. The correlation between all variables increases from 0.5 to 0.9. string &lt;- &quot;2w*2w&quot; labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.0, labelnames = labelnames) p_a &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.1, labelnames = labelnames) p_b &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.3, labelnames = labelnames) p_c &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.5, labelnames = labelnames) p_d &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.7, labelnames = labelnames) p_e &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r = 0.9, labelnames = labelnames) p_f &lt;- plot_power(design_result, max_n = 100) 15.3 Increasing correlation in on factor decreases power in second factor As Potvin and Schutz (2000) write: “The more important finding with respect to the effect of r on power relates to the effect of the correlations associated with one factor on the power of the test of the main effect of the other factor. Specifically, if the correlations among the levels of B are larger than those within the AB matrix (i.e., rB - rAB &gt; 0.0), there is a reduction in the power for the test of the A effect (and the test on B is similarly affected by the A correlations).” We see this in the plots below. As the correlation of the A factor increases from 0.4 to 0.9, we see the power for the main effect of factor B decreases. string &lt;- &quot;2w*2w&quot; labelnames = c(&quot;A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;B&quot;, &quot;b1&quot;, &quot;b2&quot;) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.4, 0.4, 0.4, 0.4, 0.4, 0.4), labelnames = labelnames) p_a &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.5, 0.4, 0.4, 0.4, 0.4, 0.5), labelnames = labelnames) p_b &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.6, 0.4, 0.4, 0.4, 0.4, 0.6), labelnames = labelnames) p_c &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.7, 0.4, 0.4, 0.4, 0.4, 0.7), labelnames = labelnames) p_d &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.8, 0.4, 0.4, 0.4, 0.4, 0.8), labelnames = labelnames) p_e &lt;- plot_power(design_result, max_n = 100) design_result &lt;- ANOVA_design(design = string, n = 20, mu = c(0,0,0,0.3), sd = 1, r &lt;- c( 0.9, 0.4, 0.4, 0.4, 0.4, 0.9), labelnames = labelnames) p_f &lt;- plot_power(design_result, max_n = 100) "],
["analytic-power-for-three-way-interactions.html", "Chapter 16 Analytic Power for Three-way Interactions", " Chapter 16 Analytic Power for Three-way Interactions There are almost no software solutions that allow researchers to perform power anaysis for more complex designs. Through simulation, it is relatively straightforward to examine the power for designs with multiple factors with many levels. Let’s start with a 2x2x2 between subjects design. We collect 50 participants in each between participant condition (so 400 participants in total - 50x2x2x2). # With 2x2x2 designs, the names for paired comparisons can become very long. # So here I abbreviate terms: Size, Color, and Cognitive Load, have values: # b = big, s = small, g = green, r = red, pres = present, abs = absent. labelnames &lt;- c(&quot;Size&quot;, &quot;b&quot;, &quot;s&quot;, &quot;Color&quot;, &quot;g&quot;, &quot;r&quot;, &quot;Load&quot;, &quot;pres&quot;, &quot;abs&quot;) # design_result &lt;- ANOVA_design(design = &quot;2b*2b*2b&quot;, #describe the design n = 50, #sample size per group mu = c(2, 2, 6, 1, 6, 6, 1, 8), #pattern of means sd = 10, #standard deviation labelnames = labelnames) #names of labels # Power based on simulations ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Size 63 0.016929 ## anova_Color 2 0.002308 ## anova_Load 10 0.003602 ## anova_Size:Color 31 0.007368 ## anova_Size:Load 86 0.024536 ## anova_Color:Load 4 0.002590 ## anova_Size:Color:Load 87 0.023564 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Size_b_Color_g_Load_pres_Size_b_Color_g_Load_abs 2 0.019598 ## p_Size_b_Color_g_Load_pres_Size_b_Color_r_Load_pres 50 0.402859 ## p_Size_b_Color_g_Load_pres_Size_b_Color_r_Load_abs 8 -0.089062 ## p_Size_b_Color_g_Load_pres_Size_s_Color_g_Load_pres 49 0.382984 ## p_Size_b_Color_g_Load_pres_Size_s_Color_g_Load_abs 49 0.410650 ## p_Size_b_Color_g_Load_pres_Size_s_Color_r_Load_pres 8 -0.099875 ## p_Size_b_Color_g_Load_pres_Size_s_Color_r_Load_abs 86 0.603041 ## p_Size_b_Color_g_Load_abs_Size_b_Color_r_Load_pres 48 0.385502 ## p_Size_b_Color_g_Load_abs_Size_b_Color_r_Load_abs 7 -0.108546 ## p_Size_b_Color_g_Load_abs_Size_s_Color_g_Load_pres 48 0.362219 ## p_Size_b_Color_g_Load_abs_Size_s_Color_g_Load_abs 49 0.391373 ## p_Size_b_Color_g_Load_abs_Size_s_Color_r_Load_pres 10 -0.118443 ## p_Size_b_Color_g_Load_abs_Size_s_Color_r_Load_abs 85 0.583840 ## p_Size_b_Color_r_Load_pres_Size_b_Color_r_Load_abs 69 -0.493544 ## p_Size_b_Color_r_Load_pres_Size_s_Color_g_Load_pres 8 -0.024318 ## p_Size_b_Color_r_Load_pres_Size_s_Color_g_Load_abs 3 0.005824 ## p_Size_b_Color_r_Load_pres_Size_s_Color_r_Load_pres 64 -0.501662 ## p_Size_b_Color_r_Load_pres_Size_s_Color_r_Load_abs 17 0.200785 ## p_Size_b_Color_r_Load_abs_Size_s_Color_g_Load_pres 63 0.475281 ## p_Size_b_Color_r_Load_abs_Size_s_Color_g_Load_abs 73 0.504676 ## p_Size_b_Color_r_Load_abs_Size_s_Color_r_Load_pres 5 -0.009259 ## p_Size_b_Color_r_Load_abs_Size_s_Color_r_Load_abs 93 0.697113 ## p_Size_s_Color_g_Load_pres_Size_s_Color_g_Load_abs 5 0.030724 ## p_Size_s_Color_g_Load_pres_Size_s_Color_r_Load_pres 69 -0.479548 ## p_Size_s_Color_g_Load_pres_Size_s_Color_r_Load_abs 23 0.226363 ## p_Size_s_Color_g_Load_abs_Size_s_Color_r_Load_pres 72 -0.507466 ## p_Size_s_Color_g_Load_abs_Size_s_Color_r_Load_abs 12 0.194912 ## p_Size_s_Color_r_Load_pres_Size_s_Color_r_Load_abs 92 0.698191 #Analytical power calculation power_analytic &lt;- power_threeway_between(design_result) power_analytic$power_A ## [1] 0.7033333 power_analytic$power_B ## [1] 0.05 power_analytic$power_C ## [1] 0.07895539 power_analytic$power_AB ## [1] 0.3217471 power_analytic$power_AC ## [1] 0.8491491 power_analytic$power_BC ## [1] 0.07895539 power_analytic$power_ABC ## [1] 0.8491491 power_analytic$eta_p_2_A ## [1] 0.01538462 power_analytic$eta_p_2_B ## [1] 0 power_analytic$eta_p_2_C ## [1] 0.0006246096 power_analytic$eta_p_2_AB ## [1] 0.005593536 power_analytic$eta_p_2_AC ## [1] 0.02200489 power_analytic$eta_p_2_BC ## [1] 0.0006246096 power_analytic$eta_p_2_ABC ## [1] 0.02200489 We can also confirm the power analysis in GPower. GPower allows you to compute the power for a three-way interaction - if you know the Cohen’s f value to enter. Cohen’s f is calculated based on the means for the interaction, the sum of squares of the effect, and the sum of squares of the errors. This is quite a challenge by hand, but we can simulate the results, or use the analytical solution we programmed to get Cohen’s f for the pattern of means that we specified. # The power for the AC interaction (Size x Load) is 0.873535. power_analytic$power_AC ## [1] 0.8491491 # We can enter the Cohen&#39;s f for this interaction. power_analytic$Cohen_f_AC ## [1] 0.15 # We can double check the calculated lambda power_analytic$lambda_AC ## [1] 9 # We can double check the critical F value power_analytic$F_critical_AC ## [1] 3.864929 A Three-Way ANOVA builds on the same principles as a One_Way ANOVA. We look at whether the differences between groups are large, compared to the standard deviation. For the main effects we simply have 2 groups of 200 participants, and 2 means. If the population standard deviations are identical across groups, this is not in any way different from a One-Way ANOVA. Indeed, we can show this by simulating a One-Way ANOVA, where instead of 8 conditions, we have two conditions, and we average over the 4 groups of the other two factors. For example, for the main effect of size above can be computed analytically. There might be a small difference in the degrees of freedom of the two tests, or it is just random variation (And it will disappear when repeating the simulation 1000.000 times instead of 100.000. string &lt;- &quot;2b&quot; n &lt;- 200 mu &lt;- c(mean(c(2, 2, 6, 1)), mean(c(6, 6, 1, 8))) sd &lt;- 10 labelnames &lt;- c(&quot;Size&quot;, &quot;big&quot;, &quot;small&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power based on simulations ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Size 77 0.01912 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Size_big_Size_small 77 0.2624 # Power based on analytical solution power_oneway_between(design_result)$power #using default alpha level of .05 ## [1] 0.7033333 Similarly, we can create a 2 factor design where we average over the third factor, and recreate the power analysis for the Two-Way interaction. For example, we can group over the Cognitive Load condition, and look at the Size by Color Interaction: string &lt;- &quot;2b*2b&quot; n &lt;- 100 mu &lt;- c(mean(c(1, 1)), mean(c(6, 1)), mean(c(6, 6)), mean(c(1, 6))) sd &lt;- 10 labelnames &lt;- c(&quot;Size&quot;, &quot;big&quot;, &quot;small&quot;, &quot;Color&quot;, &quot;green&quot;, &quot;red&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power based on simulations ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Size 67 0.017473 ## anova_Color 3 0.002299 ## anova_Size:Color 72 0.017495 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Size_big_Color_green_Size_big_Color_red 45 0.258803 ## p_Size_big_Color_green_Size_small_Color_green 92 0.500702 ## p_Size_big_Color_green_Size_small_Color_red 40 0.255210 ## p_Size_big_Color_red_Size_small_Color_green 37 0.242556 ## p_Size_big_Color_red_Size_small_Color_red 3 -0.000875 ## p_Size_small_Color_green_Size_small_Color_red 37 -0.244851 # Power based on analytical solution power_res &lt;- power_twoway_between(design_result) #using default alpha level of .05 power_res$power_A ## [1] 0.7033228 power_res$power_B ## [1] 0.05 power_res$power_AB ## [1] 0.7033228 string &lt;- &quot;2b*2b*2b&quot; n &lt;- 50 mu &lt;- c(5, 3, 2, 6, 1, 4, 3, 1) sd &lt;- 10 r &lt;- 0.0 labelnames &lt;- c(&quot;Size&quot;, &quot;big&quot;, &quot;small&quot;, &quot;Color&quot;, &quot;green&quot;, &quot;red&quot;, &quot;CognitiveLoad&quot;, &quot;present&quot;, &quot;absent&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power for the given N in the design_result ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Size 31 0.008192 ## anova_Color 4 0.002462 ## anova_CognitiveLoad 5 0.003247 ## anova_Size:Color 4 0.002095 ## anova_Size:CognitiveLoad 8 0.002904 ## anova_Color:CognitiveLoad 8 0.003242 ## anova_Size:Color:CognitiveLoad 79 0.020705 ## ## Power and Effect sizes for contrasts ## power ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_green_CognitiveLoad_absent 17 ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_present 37 ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_absent 4 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_present 41 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent 6 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present 15 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent 47 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_big_Color_red_CognitiveLoad_present 8 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_big_Color_red_CognitiveLoad_absent 27 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_present 14 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_absent 5 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present 1 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent 11 ## p_Size_big_Color_red_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_absent 57 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_present 6 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent 14 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present 13 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent 3 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_present 63 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_absent 14 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present 24 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent 65 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent 30 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present 21 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent 4 ## p_Size_small_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present 7 ## p_Size_small_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent 27 ## p_Size_small_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent 13 ## effect_size ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_green_CognitiveLoad_absent -0.199435 ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_present -0.327821 ## p_Size_big_Color_green_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_absent 0.091900 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_present -0.388231 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent -0.113090 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present -0.181153 ## p_Size_big_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent -0.384417 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_big_Color_red_CognitiveLoad_present -0.125157 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_big_Color_red_CognitiveLoad_absent 0.285572 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_present -0.189428 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_absent 0.086774 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present 0.019532 ## p_Size_big_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent -0.181283 ## p_Size_big_Color_red_CognitiveLoad_present_Size_big_Color_red_CognitiveLoad_absent 0.413751 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_present -0.062832 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent 0.214611 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present 0.149236 ## p_Size_big_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent -0.056144 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_present -0.471494 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_green_CognitiveLoad_absent -0.200476 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present -0.268195 ## p_Size_big_Color_red_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent -0.465961 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_green_CognitiveLoad_absent 0.275549 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_present 0.209476 ## p_Size_small_Color_green_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent 0.005871 ## p_Size_small_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_present -0.065421 ## p_Size_small_Color_green_CognitiveLoad_absent_Size_small_Color_red_CognitiveLoad_absent -0.268585 ## p_Size_small_Color_red_CognitiveLoad_present_Size_small_Color_red_CognitiveLoad_absent -0.201696 #Analytical power calculation power_analytic &lt;- power_threeway_between(design_result) power_analytic$power_A ## [1] 0.415306 power_analytic$power_B ## [1] 0.05715533 power_analytic$power_C ## [1] 0.1161827 power_analytic$power_AB ## [1] 0.05715533 power_analytic$power_AC ## [1] 0.05715533 power_analytic$power_BC ## [1] 0.05715533 power_analytic$power_ABC ## [1] 0.7833036 power_analytic$eta_p_2_A ## [1] 0.007598077 power_analytic$eta_p_2_B ## [1] 0.0001562256 power_analytic$eta_p_2_C ## [1] 0.001404275 power_analytic$eta_p_2_AB ## [1] 0.0001562256 power_analytic$eta_p_2_AC ## [1] 0.0001562256 power_analytic$eta_p_2_BC ## [1] 0.0001562256 power_analytic$eta_p_2_ABC ## [1] 0.01855544 In addition, ## Cohen’s f for Three-way Interactions The power for interactions depends on Cohen’s f, the alpha level, the sample size, and the degrees of freedom. # With 2x2x2 designs, the names for paired comparisons can become very long. # So here the sample sizI abbreviate terms: Size, Color, and Cognitive Load, have values: # b = big, s = small, g = green, r = red, pres = present, abs = absent. labelnames &lt;- c(&quot;Size&quot;, &quot;b&quot;, &quot;s&quot;, &quot;x&quot;, &quot;Color&quot;, &quot;g&quot;, &quot;r&quot;, &quot;Load&quot;, &quot;pres&quot;, &quot;abs&quot;) # design_result &lt;- ANOVA_design(design = &quot;3b*2b*2b&quot;, #describe the design n = 10, #sample size per group mu = c(20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20), #pattern of means sd = 20, #standard deviation labelnames = labelnames) #names of labels # Power based on simulations # ANOVA_power(design_result, nsims = nsims) #Analytical power calculation power_analytic &lt;- power_threeway_between(design_result) power_analytic$power_A ## [1] 0.05 power_analytic$power_B ## [1] 0.05 power_analytic$power_C ## [1] 0.3478125 power_analytic$power_AB ## [1] 0.2414317 power_analytic$power_AC ## [1] 0.4928984 power_analytic$power_BC ## [1] 0.7752085 power_analytic$power_ABC ## [1] NaN power_analytic$eta_p_2_A ## [1] 0 power_analytic$Cohen_f_A ## [1] 0 We see that a pattern of means of 0, 0, 0, 0, 0, 0, 0, 20 for a 2x2x2 interaction equals a Cohen’s f of 0.25. labelnames &lt;- c(&quot;Size&quot;, &quot;b&quot;, &quot;s&quot;, &quot;Color&quot;, &quot;g&quot;, &quot;r&quot;) design_result &lt;- ANOVA_design(design = &quot;2b*2b&quot;, #describe the design n = 10, #sample size per group mu = c(0, 0, 0, 10), #pattern of means sd = 10, #standard deviation labelnames = labelnames) #names of labels # Power based on simulations # ANOVA_power(design_result, nsims = nsims) #Analytical power calculation power_analytic &lt;- power_twoway_between(design_result) power_analytic$power_A ## [1] 0.3371329 power_analytic$eta_p_2_A ## [1] 0.05882353 power_analytic$Cohen_f_A ## [1] 0.25 Cohen’s f is twice as large for a 2x2 design with the same mean value in one of four cells. In a 2 factor between design. labelnames &lt;- c(&quot;Size&quot;, &quot;b&quot;, &quot;s&quot;) design_result &lt;- ANOVA_design(design = &quot;2b&quot;, #describe the design n = 10, #sample size per group mu = c(0, 5), #pattern of means sd = 10, #standard deviation labelnames = labelnames) #names of labels # Power based on simulations # ANOVA_power(design_result, nsims = nsims) #Analytical power calculation power_analytic &lt;- power_oneway_between(design_result) power_analytic$power ## [1] 0.1850957 power_analytic$eta_p_2 ## [1] 0.05882353 power_analytic$Cohen_f ## [1] 0.25 "],
["power-for-design-variations.html", "Chapter 17 Power for Design Variations 17.1 Within Designs", " Chapter 17 Power for Design Variations Researchers might consider what the effects on the statistical power of their design is, when they add participants. Participants can be added to an additional condition, or to the existing design. In a One-Way ANOVA adding a condition means, for example, going from a 1x2 to a 1x3 design. For example, in addition to a control and intensive training condition, we add a light training condition. string &lt;- &quot;2b&quot; n &lt;- 50 mu &lt;- c(80, 86) #All means are equal - so there is no real difference. sd &lt;- 10 labelnames &lt;- c(&quot;Condition&quot;, &quot;control&quot;, &quot;intensive_training&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power for the given N in the design_result power_oneway_between(design_result)$power ## [1] 0.8438754 power_oneway_between(design_result)$Cohen_f ## [1] 0.3 power_oneway_between(design_result)$eta_p_2 ## [1] 0.08256881 ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_Condition 92 0.0954 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_Condition_control_Condition_intensive_training 92 0.624 We now addd a condition. Let’s assume the ‘light training’ condition falls in between the other two means. And we can see power across sample sizes # Plot power curve (from 5 to 100) plot_power(design_result, max_n = 100) string &lt;- &quot;3b&quot; n &lt;- 50 mu &lt;- c(80, 83, 86) #All means are equal - so there is no real difference. sd &lt;- 10 labelnames &lt;- c(&quot;Condition&quot;, &quot;control&quot;, &quot;light_training&quot;, &quot;intensive_training&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power for the given N in the design_result power_oneway_between(design_result)$power ## [1] 0.7616545 power_oneway_between(design_result)$Cohen_f ## [1] 0.244949 power_oneway_between(design_result)$eta_p_2 ## [1] 0.05660377 We see that adding a condition that falls between the other two means reduces our power. Let’s instead assume that the ‘light training’ condition is not different from the control condition. In other words, the mean we add is as extreme as one of the existing means. # Plot power curve (from 5 to 100) plot_power(design_result, max_n = 100) string &lt;- &quot;3b&quot; n &lt;- 50 mu &lt;- c(80, 80, 86) #All means are equal - so there is no real difference. sd &lt;- 10 labelnames &lt;- c(&quot;Condition&quot;, &quot;control&quot;, &quot;light_training&quot;, &quot;intensive_training&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) # Power for the given N in the design_result power_oneway_between(design_result)$power ## [1] 0.8762941 power_oneway_between(design_result)$Cohen_f ## [1] 0.2828427 power_oneway_between(design_result)$eta_p_2 ## [1] 0.07407407 Now power has increased. This is not always true. The power is a function of many factors in the design, incuding the effect size (Cohen’s f) and the total sample size (and the degrees of freedom and number of groups). But as we will see below, as we keep adding conditions, the power will reduce, even if initially, the power might increase. # Plot power curve (from 5 to 100) plot_power(design_result,max_n = 100) It helps to think of these different designs in terms of either partial eta-squared, or Cohen’s f (the one can easily be converted into the other). #Two groups mu &lt;- c(80, 86) sd = 10 n &lt;- 50 #sample size per condition mean_mat &lt;- t(matrix(mu, nrow = 2, ncol = 1)) #Create a mean matrix # Using the sweep function to remove rowmeans from the matrix mean_mat_res &lt;- sweep(mean_mat,2, rowMeans(mean_mat)) mean_mat_res ## [,1] [,2] ## [1,] -3 3 MS_a &lt;- n * (sum(mean_mat_res^2)/(2-1)) MS_a ## [1] 900 SS_A &lt;- n * sum(mean_mat_res^2) SS_A ## [1] 900 MS_error &lt;- sd^2 MS_error ## [1] 100 SS_error &lt;- MS_error * (n*2) SS_error ## [1] 10000 eta_p_2 &lt;- SS_A/(SS_A+SS_error) eta_p_2 ## [1] 0.08256881 f_2 &lt;- eta_p_2/(1-eta_p_2) f_2 ## [1] 0.09 Cohen_f &lt;- sqrt(f_2) Cohen_f ## [1] 0.3 #Three groups mu &lt;- c(80, 83, 86) sd = 10 n &lt;- 50 mean_mat &lt;- t(matrix(mu, nrow = 3, ncol = 1)) #Create a mean matrix # Using the sweep function to remove rowmeans from the matrix mean_mat_res &lt;- sweep(mean_mat,2, rowMeans(mean_mat)) mean_mat_res ## [,1] [,2] [,3] ## [1,] -3 0 3 MS_a &lt;- n * (sum(mean_mat_res^2)/(3-1)) MS_a ## [1] 450 SS_A &lt;- n * sum(mean_mat_res^2) SS_A ## [1] 900 MS_error &lt;- sd^2 MS_error ## [1] 100 SS_error &lt;- MS_error * (n*3) SS_error ## [1] 15000 eta_p_2 &lt;- SS_A/(SS_A+SS_error) eta_p_2 ## [1] 0.05660377 f_2 &lt;- eta_p_2/(1-eta_p_2) f_2 ## [1] 0.06 Cohen_f &lt;- sqrt(f_2) Cohen_f ## [1] 0.244949 The SS_A or the sum of squares for the main effect, is 900 for two groups, and the SS_error for the error term is 10000. When we add a group, SS_A is 900, and the SS_error is 15000. Because the added condition falls exactly on the grand mean (83), the sum of squared for this extra group is 0. In other words, it does nothing to increase the signal that there is a difference between groups. However, the sum of squares for the error, which is a function of the total sample size, is increased, which reduces the effect size. So, adding a condition that falls on the grand mean reduces the power for the main effect of the ANOVA. Obviously, adding such a group has other benefits, such as being able to compare the two means to a new third condition. We already saw that adding a condition that has a mean as extreme as one of the existing groups also reduces the power. Let’s again do the calculations step by step when the extra group has a mean as extreme as one of the two original conditions. #Three groups mu &lt;- c(80, 80, 86) sd = 10 n &lt;- 50 mean_mat &lt;- t(matrix(mu, nrow = 3, ncol = 1)) #Create a mean matrix # Using the sweep function to remove rowmeans from the matrix mean_mat_res &lt;- sweep(mean_mat,2, rowMeans(mean_mat)) mean_mat_res ## [,1] [,2] [,3] ## [1,] -2 -2 4 MS_a &lt;- n * (sum(mean_mat_res^2)/(3-1)) MS_a ## [1] 600 SS_A &lt;- n * sum(mean_mat_res^2) SS_A ## [1] 1200 MS_error &lt;- sd^2 MS_error ## [1] 100 SS_error &lt;- MS_error * (n*3) SS_error ## [1] 15000 eta_p_2 &lt;- SS_A/(SS_A+SS_error) eta_p_2 ## [1] 0.07407407 f_2 &lt;- eta_p_2/(1-eta_p_2) f_2 ## [1] 0.08 Cohen_f &lt;- sqrt(f_2) Cohen_f ## [1] 0.2828427 We see the sum of squares of the error stays the same - 15000 - because it is only determined by the standard error and the sample size, but not by the differences in the means. This is an increase of 5000 compared to the 2 group design. The sum of squares (the second component that determines the size of partial eta-squared) increases, which increases Cohen’s f. 17.1 Within Designs Now imagine our design described above was a within design. The means and sd remain the same. We collect 50 participants (instead of 100, or 50 per group, for the between design). Let’s first assume the two samples are completely uncorrelated. string &lt;- &quot;2w&quot; n &lt;- 50 mu &lt;- c(80, 86) #All means are equal - so there is no real difference. sd &lt;- 10 labelnames &lt;- c(&quot;Condition&quot;, &quot;control&quot;, &quot;intensive_training&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.8366436 We see power is ever so slightly less than for the between subject design. This is due to the loss in degrees of freedom, which is 2(n-1) for between designs, and n-1 for within designs. But as the correlation increases, the power advantage of within designs becomes stronger. string &lt;- &quot;3w&quot; n &lt;- 50 mu &lt;- c(80, 83, 86) #All means are equal - so there is no real difference. sd &lt;- 10 labelnames &lt;- c(&quot;Condition&quot;, &quot;control&quot;, &quot;light_training&quot;,&quot;intensive_training&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7570841 When we add a a condition in a within design where we expect the mean to be identical to the grand mean, we again see that the power decreases. This similarly shows that adding a condition that equals the grand mean to a within subject design does not come for free, but has a power cost. n &lt;- 30 sd &lt;- 10 r &lt;- 0.5 string &lt;- &quot;2w&quot; mu &lt;- c(0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7539647 power_oneway_within(design_result)$Cohen_f ## [1] 0.25 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.5085476 power_oneway_within(design_result)$lambda ## [1] 7.5 power_oneway_within(design_result)$F_critical ## [1] 4.182964 string &lt;- &quot;3w&quot; mu &lt;- c(0, 0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7937037 power_oneway_within(design_result)$Cohen_f ## [1] 0.2357023 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.4152274 power_oneway_within(design_result)$lambda ## [1] 10 power_oneway_within(design_result)$F_critical ## [1] 3.155932 string &lt;- &quot;4w&quot; mu &lt;- c(0, 0, 0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7940126 power_oneway_within(design_result)$Cohen_f ## [1] 0.2165064 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.3595975 power_oneway_within(design_result)$lambda ## [1] 11.25 power_oneway_within(design_result)$F_critical ## [1] 2.709402 string &lt;- &quot;5w&quot; mu &lt;- c(0, 0, 0, 0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;, &quot;a5&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7838682 power_oneway_within(design_result)$Cohen_f ## [1] 0.2 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.3216338 power_oneway_within(design_result)$lambda ## [1] 12 power_oneway_within(design_result)$F_critical ## [1] 2.44988 string &lt;- &quot;6w&quot; mu &lt;- c(0, 0, 0, 0, 0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;, &quot;a5&quot;, &quot;a6&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.7699592 power_oneway_within(design_result)$Cohen_f ## [1] 0.186339 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.2936101 power_oneway_within(design_result)$lambda ## [1] 12.5 power_oneway_within(design_result)$F_critical ## [1] 2.276603 string &lt;- &quot;7w&quot; mu &lt;- c(0, 0, 0, 0, 0, 0, 5) #All means are equal - so there is no real difference. labelnames &lt;- c(&quot;Factor_A&quot;, &quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;, &quot;a4&quot;, &quot;a5&quot;, &quot;a6&quot;, &quot;a7&quot;) # design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = labelnames) power_oneway_within(design_result)$power ## [1] 0.754601 power_oneway_within(design_result)$Cohen_f ## [1] 0.1749636 power_oneway_within(design_result)$Cohen_f_SPSS ## [1] 0.2718301 power_oneway_within(design_result)$lambda ## [1] 12.85714 power_oneway_within(design_result)$F_critical ## [1] 2.151016 This set of designs where we increase the number of conditions demonstrates a common pattern where the power initially increases, but then starts to decrease. Again, the exact pattern (and when the power starts to decrease) depends on the effect size and sample size. Note also that the effect size (Cohen’s f) decreases as we add conditions, but the increased sample size compensates for this when calculating power. When using power analysis software such as GPower, this is important to realize. You can’t just power for a medium effect size, and then keep adding conditions under the assumption that the increased power you see in the program will become a reality. Increasing the number of conditions will reduce the effect size, and therefore, adding conditions will not automatically increase power (and might even decrease it). Overal, the effect of adding conditions with an effect close to the grand mean reduces power quite strongly, and adding conditions with means close to the extreme of the current conditions will either slightly increase of decrease power. "],
["setting-the-correlation-matrix.html", "Chapter 18 Setting the Correlation Matrix", " Chapter 18 Setting the Correlation Matrix In a 2x2 design, with factors A and B, each with 2 levels, there are 6 possible comparisons that can be made. A1 vs. A2 A1 vs. B1 A1 vs. B2 A2 vs. B1 A2 vs. B2 B1 vs. B2 The number of possible comparisons is the product of the levels of all factors squared minus the product of all factors, divided by two. For a 2x2 design where each factor has two levels, this is: (((2 * 2) ^ 2) - (2 * 2))/2 ## [1] 6 The number of possible comparisons increases rapidly when adding factors and levels for each factor. For example, for a 2x2x4 design it is: (((2 * 2 * 4) ^ 2) - (2 * 2 * 4))/2 ## [1] 120 Each of these comparisons can have their own correlation if the factor is manipulated within subjects (if the factor is manipulated between subjects the correlation is 0). These correlations determine the covariance matrix. Potvin and Schutz (2000) surveyed statistical tools for power analysis and conclude that most software packages are limited to one factor repeated measure designs and do not provide power calculations for within designs with multiple factor (which is still true for software such as G*Power). Furthermore, software solutions which were available at the time (DATASIM by Bradley, Russel, &amp; Reeve, 1996) required researchers to assume correlations were of the same magnitude for all within factors, which is not always realistic. If you do not want to assume equal correlations for all paired comparisons, you can specify the correlation for each possible comparison. The order in which the correlations are entered in the vector should match the covariance matrix. The order for a 2x2 design is given in the 6 item list above. The general pattern is that the matrix is filled from top to bottom, and left to right, illustrated by the increasing correlations in the table below. a1_b1 a1_b2 a2_b1 a2_b2 a1_b1 1.00 0.91 0.92 0.93 a1_b2 0.91 1.00 0.94 0.95 a2_b1 0.92 0.94 1.00 0.96 a2_b2 0.93 0.95 0.9 1.00 The diagonal is generated dynamically (based on the standard deviation). We would enter this correlation matrix as: design_result &lt;- ANOVA_design(design = &quot;2w*2w&quot;, n = 80, mu = c(1.1, 1.2, 1.3, 1.4), sd = 1, r &lt;- c(0.91, 0.92, 0.93, 0.94, 0.95, 0.96), labelnames = c(&quot;color&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;speed&quot;, &quot;fast&quot;, &quot;slow&quot;)) We can check the correlation matrix by asking for it from the design_result object to check if it was entered the way we wanted: design_result$cor_mat ## red_fast red_slow blue_fast blue_slow ## red_fast 1.00 0.91 0.92 0.93 ## red_slow 0.91 1.00 0.94 0.95 ## blue_fast 0.92 0.94 1.00 0.96 ## blue_slow 0.93 0.95 0.96 1.00 "],
["validation-of-effect-size-estimates-for-one-way-anova.html", "Chapter 19 Validation of effect size estimates for One-Way ANOVA 19.1 Three conditions, small effect size 19.2 Four conditions, medium effect size 19.3 Two conditions, large effect size", " Chapter 19 Validation of effect size estimates for One-Way ANOVA Using the formulas below, we can calculate the means for between designs with one factor (One-Way ANOVA). Using the formula also used in Albers &amp; Lakens (2018), we can determine the means that should yield a specified effect sizes (expressed in Cohen’s f). mu_from_ES &lt;- function(K, ES){ # provides the vector of population means for a given population ES and nr of groups f2 &lt;- ES / (1 - ES) if (K == 2) { a &lt;- sqrt(f2) muvec &lt;- c(-a, a) } if (K == 3) { a &lt;- sqrt(3 * f2 / 2) muvec &lt;- c(-a, 0, a) } if (K == 4) { a &lt;- sqrt(f2) muvec &lt;- c(-a,-a, a, a) } # note: function gives error when K not 2,3,4. But we don&#39;t need other K. return(muvec) } Eta-squared (idential to partial eta-squared for One-Way ANOVA’s) has benchmarks of .0099, .0588, and .1379 for small, medium, and large effect sizes (cohen, 1988). 19.1 Three conditions, small effect size We can simulate a one-factor anova setting means to achieve a certain effect size. Eta-squared is biased. Thus, the eta-squared we calculate based on the observed data overestimates the population effect size. This bias is largest for smaller sample sizes. Thus, to test whether the simulation yields the expected effect size, we use extremele large sample sizes in each between subject condition (n = 5000). This simulation should yield a small effect size (0.099) K &lt;- 3 ES &lt;- .0099 mu &lt;- mu_from_ES(K = K, ES = ES) n &lt;- 5000 sd &lt;- 1 r &lt;- 0 string = paste(K,&quot;b&quot;,sep = &quot;&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 100 0.01002 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 100 0.1220 ## p_factor1_level1_factor1_level3 100 0.2446 ## p_factor1_level2_factor1_level3 100 0.1231 The resulting effect size estimate from the simulation is very close to 0.0099 19.2 Four conditions, medium effect size This simulation should yield a medium effect size (0.588) across four independent conditions. K &lt;- 4 ES &lt;- .0588 mu &lt;- mu_from_ES(K = K, ES = ES) n &lt;- 5000 sd &lt;- 1 r &lt;- 0 string = paste(K,&quot;b&quot;,sep = &quot;&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;, &quot;level3&quot;, &quot;level4&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 100 0.05901 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 8 0.0021498 ## p_factor1_level1_factor1_level3 100 0.5017615 ## p_factor1_level1_factor1_level4 100 0.5013550 ## p_factor1_level2_factor1_level3 100 0.4991643 ## p_factor1_level2_factor1_level4 100 0.4987678 ## p_factor1_level3_factor1_level4 5 -0.0006133 Results are very close to 0.588. 19.3 Two conditions, large effect size We can simulate a one-factor anova that should yield a large effect size (0.1379) across two conditions. K &lt;- 2 ES &lt;- .1379 mu &lt;- mu_from_ES(K = K, ES = ES) n &lt;- 5000 sd &lt;- 1 r &lt;- 0 string = paste(K,&quot;b&quot;,sep = &quot;&quot;) design_result &lt;- ANOVA_design(design = string, n = n, mu = mu, sd = sd, r = r, labelnames = c(&quot;factor1&quot;, &quot;level1&quot;, &quot;level2&quot;)) ANOVA_power(design_result, nsims = nsims) ## Power and Effect sizes for ANOVA tests ## power effect_size ## anova_factor1 100 0.1369 ## ## Power and Effect sizes for contrasts ## power effect_size ## p_factor1_level1_factor1_level2 100 0.7963 The results are very close to is simulation should yield a small effect size (0.1379). "]
]
